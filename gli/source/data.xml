<?xml version="1.0" encoding="utf-8"?>

<website>
	<post index="0010" date="2016-09-11" std-date="2015-09-11T23:30:00.00Z" title="GLI 0.8.1.1 released">
		<list title="Improvements:">
			<entry>Updated GLM to 0.9.8.0 release</entry>
		</list>

		<list title="Fixes:">
			<entry>Fixed KTX cube maps saving</entry>
			<entry>Fixed texture::clear build</entry>
		</list>

		<list>
			<download index="0.8.1.1" />
			<entry href="https://github.com/g-truc/gli/issues">Submit a bug report</entry>
			<entry href="../0.8.1/api/index.html">GLI 0.8.1 API</entry>
		</list>
	</post>

	<post index="0009" date="2016-03-16" std-date="2016-03-16T23:30:00.00Z" title="GLI 0.8.1.0 released">
		<list title="Features:">
			<entry>Added texture copy, no allocation involved, only transfer</entry>
			<entry>Added sub-image copy functions</entry>
			<entry>Added non-member clear functions</entry>
			<entry>Added make_texture* helper functions</entry>
		</list>

		<list title="Improvements:">
			<entry>Added compressed npot textures support #73</entry>
			<entry>Added image access cache to generic textures</entry>
			<entry>Added luminance alpha format translation to OpenGL 3.3+ through RG swizzling. #93</entry>
			<entry>Improved performance when sampling using mipmaps</entry>
			<entry>Improved nearest filter without border using texture_lod performance (~2.5x faster with texture2d)</entry>
			<entry>Improved texture::data() (~18x with cube array, ~68x with 2D)</entry>
			<entry>Improved texture::size() (~3.1x with cube array, ~3.9x with 2D)</entry>
			<entry>Improved simultanous texture::size() and texture::extent() calls (~2.1x with cube array, ~2.3x with 2D)</entry>
		</list>

		<list title="Fixes:">
			<entry>Fixed DX10 DDS saving of 3D textures #91</entry>
			<entry>Fixed BGRX translation with PROFILE_GL33 profile #92</entry>
			<entry>Fixed DDS9 loading of 3D texture detected as 2D texture #93</entry>
		</list>

		<list>
			<download index="0.8.1.0" />
			<entry href="https://github.com/g-truc/gli/issues">Submit a bug report</entry>
			<entry href="../0.8.1/api/index.html">GLI 0.8.1 API</entry>
		</list>
	</post>

	<post index="0008" date="2016-02-16" std-date="2016-02-16T23:30:00.00Z" title="GLI 0.8.0.0 released">
		<list title="Features:">
			<entry>Added texture swizzle support #79</entry>
			<entry>Added texture memory swizzle support</entry>
			<entry>Added texture conversion from any uncompressed format to any uncompressed format</entry>
			<entry>Added texture lod</entry>
			<entry>Added texture mipmaps generation for uncompressed formats</entry>
			<entry>Added support for load and store</entry>
			<entry>Added support for many new formats</entry>
			<entry>Added sampler 1D, 2D, 3D, array and cube map</entry>
			<entry>Added sampler texel fetch and texel write</entry>
			<entry>Added sampler clear</entry>
			<entry>Added transform algorithm to compute arithmetic between texels</entry>
			<entry>Added reduce algorithm to compare all texels within an image</entry>
		</list>

		<list title="Improvements:">
			<entry>Reordered formats to match Vulkan formats</entry>
			<entry>Improved OpenGL translation with for multiple profiles: KTX, ES2.0, ES3.0, GL3.2 and GL3.3</entry>
			<entry>Improved Doxygen documentation</entry>
		</list>

		<list title="Fixes:">
			<entry>Fixed PVRTC2 support</entry>
			<entry>Fixed luminance and alpha translation to OpenGL #56</entry>
			<entry>Fixed DXGI_FORMAT_B8G8R8X8_UNORM_SRGB support #59</entry>
			<entry>Fixed FORMAT_RGBA8_UNORM DDS loading using DDPF_RGBA mode #60</entry>
			<entry>Fixed handling of DDS DDPF_ALPHAPIXELS #68</entry>
			<entry>Fixed images, better matching names and formats #78 #81 #80</entry>
			<entry>Fixed BC4U and BC5U files generated from MS DDS loader #82</entry>
		</list>

		<list title="Work in progress:">
			<entry>Added KMG container support and spec proposal</entry>
		</list>

		<list>
			<download index="0.8.0.0" />
			<entry href="https://github.com/g-truc/gli/issues">Submit a bug report</entry>
			<entry href="../0.8.0/api/index.html">GLI 0.8.0 API</entry>
		</list>
	</post>

	<post index="0007" date="2015-09-01" std-date="2015-09-01T23:30:00.00Z" title="GLI 0.7.0.0 released">
		<list title="Changelog:">
			<entry>Added KTX loading and saving</entry>
			<entry>Added gli::load for generic file loading, either DDS or KTX files depending on filename extensions</entry>
			<entry>Added gli::save for generic file saving, either DDS or KTX files depending on filename extensions</entry>
			<entry>Added texture views using different texture format, including compressed texture formats</entry>
			<entry>Added fine granularity includes</entry>
			<entry>Improved API documentation</entry>
			<entry>Much faster texture comparisons is non optimal cases. (Measured ~21x faster on Intel IVB)</entry>
			<entry>Explicitly handling of texture targets: fixed various cases of cubemap and texture arrays failing to load with DDS</entry>
			<entry>Fixed GCC</entry>
			<entry>Fixed warnings</entry>
			<entry>Fixed saved DDS header size on #52</entry>
		</list>

		<list>
			<download index="0.7.0.0" />
			<entry href="https://github.com/g-truc/gli/issues">Submit a bug report</entry>
			<entry href="../0.7.0/api/index.html">GLI 0.7.0 API</entry>
		</list>
	</post>

	<post index="0006" date="2015-07-18" std-date="2015-07-18T23:30:00.00Z" title="GLI 0.6.1.1 released">
		<list title="Changelog:">
			<entry>Fixed interface inconsistencies</entry>
			<entry>Improved clear(), data() and size() performance using caching</entry>
			<entry>Removed internal dependence to std::fstream</entry>
			<entry>Added FORMAT_BGRX8_UNORM and FORMAT_BGRX8_SRGB support #48, #43</entry>
			<entry>Improved FORMAT_RGB8_UNORM loading</entry>
		</list>

		<list>
			<download index="0.6.1.1" />
			<entry href="https://github.com/g-truc/gli/issues">Submit a bug report</entry>
			<entry href="../0.6.1/api/index.html">GLI 0.6.1 API</entry>
		</list>
	</post>

	<post index="0005" date="2015-06-28" std-date="2015-06-28T23:30:00.00Z" title="GLI 0.6.0.0 released">
		<list title="Changelog:">
			<entry>Large refactoring</entry>
			<entry>Added loading DDS from memory</entry>
			<entry>Added saving DDS to memory</entry>
			<entry>Improved DDS coverage for R, RG, RGB and RGBA formats</entry>
			<entry>Added DDS ASTC, PVRTC, ATC and ETC support</entry>
			<entry>Added DDS alpha, luminance and alpha luminance support</entry>
			<entry>Added PVRTC2, ETC2 and EAC formats</entry>
		</list>

		<list>
			<download index="0.6.0.0" />
			<entry href="https://github.com/g-truc/gli/issues">Submit a bug report</entry>
			<entry href="../0.6.0/api/index.html">GLI 0.6.0 API</entry>
		</list>
	</post>

	<post index="0004" date="2014-01-20" std-date="2014-01-20T23:30:00.00Z" title="GLI 0.5.1.1 released">
		<paragraph>
			Tested with Visual C++, GCC, Clang and ICC.
		</paragraph>
		<list title="Changelog:">
			<entry>Fixed swizzled RGB channel when reading back a DDS</entry>
			<entry>Fixed getMask* link errors</entry>
		</list>

		<list>
			<download index="0.5.1.1" />
			<entry href="https://github.com/g-truc/gli/issues">Submit a bug report</entry>
			<entry href="../0.5.1/api/index.html">GLI 0.5.1 API</entry>
		</list>
	</post>

	<post index="0003" date="2014-01-18" std-date="2014-01-18T23:30:00.00Z" title="GLI 0.5.1.0 released">
		<list title="Changelog:">
			<entry>Added flip function</entry>
			<entry>Added level_count function</entry>
			<entry>Fixed interaction with std::map (#33)</entry>
			<entry>Added texelFetch and texelWrite functions</entry>
		</list>

		<list>
			<download index="0.5.1.0" />
			<entry href="https://github.com/g-truc/gli/issues">Submit a bug report</entry>
			<entry href="../0.5.1/api/index.html">GLI 0.5.1 API</entry>
		</list>
	</post>

	<post index="0002" date="2013-11-23" std-date="2013-11-23T23:30:00.00Z" title="GLI 0.5.0.0 released">
		<list title="Changelog:">
			<entry>Essencially a rewrite of the library</entry>
			<entry>Added explicit copies</entry>
			<entry>Added single memory allocation per texture storage</entry>
			<entry>Added texture views</entry>
			<entry>Added texture copies</entry>
			<entry>Added comparison operators</entry>
			<entry>Added clear</entry>
		</list>

		<list>
			<download index="0.5.0.0" />
			<entry href="https://github.com/g-truc/gli/issues">Submit a bug report</entry>
			<entry href="../0.5.0/api/index.html">GLI 0.5.0 API</entry>
		</list>
	</post>

	<post index="0001" date="2013-07-10" std-date="2013-07-10T23:30:00.00Z" title="GLI website available">
		<paragraph>
			Welcome on GLI website where new releases will be published and documentation will be provided.
		</paragraph>

		<list>
			<download index="0.4.1.0" />
			<entry href="https://github.com/g-truc/gli/issues">Submit a bug report</entry>
		</list>
	</post>

	<about-long version="0.8">
		<paragraph>
			OpenGL Image (GLI) is a header only C++ image library for graphics software.
			*GLI* provides classes and functions to load image files (<link href="https://www.khronos.org/opengles/sdk/tools/KTX/">KTX</link> and (<link href="https://msdn.microsoft.com/en-us/library/windows/desktop/bb943990%28v=vs.85%29.aspx">DDS</link>),
			facilitate graphics APIs texture creation, compare textures, access texture texels, sample textures, convert textures, generate mipmaps, etc.
		</paragraph>
		<paragraph>
			This library works perfectly with <link href="https://www.opengl.org">OpenGL</link> or <link href="https://www.khronos.org/vulkan/">Vulkan</link> but it also ensures interoperability with other third party libraries and SDK.
			It is a good candidate for software rendering (raytracing / rasterisation), image processing, image based software testing or any development context that requires a simple and convenient image library.
		</paragraph>
		<list title="GLI is written in C++11. It is a platform independent library with no dependence and it supports the following compilers:">
			<entry>
				<link href="https://developer.apple.com/library/mac/documentation/CompilerTools/Conceptual/LLVMCompilerOverview/index.html">Apple Clang</link> 4.0 and higher
			</entry>
			<entry>
				<link href="http://gcc.gnu.org/">GCC</link> 4.6 and higher
			</entry>
			<entry>
				<link href="https://software.intel.com/en-us/intel-compilers">Intel C++ Composer</link> XE 2013 and higher
			</entry>
			<entry>
				<link href="http://llvm.org/">LLVM</link> 3.2 and higher
			</entry>
			<entry>
				<link href="http://www.visualstudio.com/">Visual Studio</link> 2010 and higher
			</entry>
			<entry>
				Any conform C++11 compiler
			</entry>
		</list>
		<paragraph>
			For more information about GLI, please have a look at <link href="../0.8.0/api/index.html">the API reference documentation</link>.
		</paragraph>
		<paragraph>
			The source code and the documentation, including this manual, are licensed under the
			<link href="http://gli.g-truc.net/copying.txt">Happy Bunny License (Modified MIT) or the MIT License</link>.
		</paragraph>
		<paragraph>
			Thanks for contributing to the project by <link href="https://github.com/g-truc/gli/issues">submitting issues</link> for bug reports and feature requests. Any feedback is welcome at <link href="mailto://gli@g-truc.net">gli@g-truc.net</link>.
		</paragraph>
		<code title="Code sample, converting a RGB32F texture loaded from KTX or DDS file into a RGB9E5 texture and save it:">
			<line>
				<keyword>#include </keyword>
				<string>&lt;gli/texture2d.hpp&gt;</string>
			</line>
			<line>
				<keyword>#include </keyword>
				<string>&lt;gli/convert.hpp&gt;</string>
			</line>
			<line>
				<keyword>#include </keyword>
				<string>&lt;gli/generate_mipmaps.hpp&gt;</string>
			</line>
			<line>
				<keyword>#include </keyword>
				<string>&lt;gli/load.hpp&gt;</string>
			</line>
			<line>
				<keyword>#include </keyword>
				<string>&lt;gli/save.hpp&gt;</string>
			</line>
			<line></line>
			<line>
				<keyword>bool</keyword> convert_rgb32f_rgb9e5(<keyword>char const</keyword>* FilenameSrc, <keyword>char const</keyword>* FilenameDst)
			</line>
			<line>
				{
			</line>
			<line align="32px">
				<keyword>if</keyword>(FilenameDst == <keyword>nullptr</keyword>)
			</line>
			<line align="64px">
				<keyword>return false</keyword>;
			</line>
			<line align="32px">
				<keyword>if</keyword>(std::strstr(FilenameDst, ".dds") > 0 || std::strstr(FilenameDst, ".ktx") > 0)
			</line>
			<line align="64px">
				<keyword>return false</keyword>;
			</line>
			<line></line>
			<line align="32px">
				gli::texture2d TextureSource(gli::load(FilenameSrc));
			</line>
			<line align="32px">
				<keyword>if</keyword>(TextureSource.empty())
			</line>
			<line align="64px">
				<keyword>return false</keyword>;
			</line>
			<line align="32px">
				<keyword>if</keyword>(TextureSource.format() != gli::FORMAT_RGB16_SFLOAT_PACK16 &amp;&amp; TextureSource.format() != gli::FORMAT_RGB32_SFLOAT_PACK32)
			</line>
			<line align="64px">
				<keyword>return false</keyword>;
			</line>
			<line></line>
			<line align="32px">
				gli::texture2d TextureMipmaped = gli::generate_mipmaps(TextureSource, gli::FILTER_LINEAR);
			</line>
			<line align="32px">
				gli::texture2d TextureConverted = gli::convert(TextureMipmaped, gli::FORMAT_RGB9E5_UFLOAT_PACK32);
			</line>
			<line></line>
			<line align="32px">
				gli::save(TextureConverted, FilenameDst);
			</line>
			<line></line>
			<line align="32px">
				<keyword>return true</keyword>;
			</line>
			<line>
				}
			</line>
		</code>
	</about-long>

	<about-long version="0.7">
		<paragraph>
			OpenGL Image (GLI) is a header only C++ image library for graphics software.
		</paragraph>
		<paragraph>
			*GLI* provides classes and functions to load image files (<link href="https://www.khronos.org/opengles/sdk/tools/KTX/">KTX</link> and (<link href="https://msdn.microsoft.com/en-us/library/windows/desktop/bb943990%28v=vs.85%29.aspx">DDS</link>), facilitating graphics APIs texture creation, comparing, manipulating textures, etc.
		</paragraph>
		<paragraph>
			This library works perfectly with <link href="https://www.opengl.org">OpenGL</link> but it also ensures interoperability with other third party libraries and SDK. It is a good candidate for software rendering (raytracing / rasterisation), image processing, physic simulations and any development context that requires a simple and convenient image library.
		</paragraph>
		<list title="GLI is written in C++11. It is a platform independent library with no dependence and it supports the following compilers:">
			<entry>
				<link href="https://developer.apple.com/library/mac/documentation/CompilerTools/Conceptual/LLVMCompilerOverview/index.html">Apple Clang</link> 4.0 and higher
			</entry>
			<entry>
				<link href="http://gcc.gnu.org/">GCC</link> 4.6 and higher
			</entry>
			<entry>
				<link href="https://software.intel.com/en-us/intel-compilers">Intel C++ Composer</link> XE 2013 and higher
			</entry>
			<entry>
				<link href="http://llvm.org/">LLVM</link> 3.2 and higher
			</entry>
			<entry>
				<link href="http://www.visualstudio.com/">Visual Studio</link> 2010 and higher
			</entry>
			<entry>
				Any conform C++11 compiler
			</entry>
		</list>
		<paragraph>
			For more information about GLI, please have a look at <link href="../0.7.0/api/index.html">the API reference documentation</link>.
		</paragraph>
		<paragraph>
			The source code and the documentation, including this manual, are licensed under the
			<link href="http://glm.g-truc.net/copying.txt">Happy Bunny License (Modified MIT) or the MIT License</link>.
		</paragraph>
		<paragraph>
			Thanks for contributing to the project by <link href="https://github.com/g-truc/gli/issues">submitting issues</link> for bug reports and feature requests. Any feedback is welcome at <link href="mailto://gli@g-truc.net">gli@g-truc.net</link>.
		</paragraph>
		<code title="Code sample:">
			<line>
				<keyword>#include </keyword>
				<string>&lt;gli/texture.hpp&gt;</string>
			</line>
			<line>
				<keyword>#include </keyword>
				<string>&lt;gli/load.hpp&gt;</string>
			</line>
			<line>
				<keyword>#include </keyword>
				<string>&lt;gli/save.hpp&gt;</string>
			</line>
			<line>
				<keyword>#include </keyword>
				<string>&lt;gli/gl.hpp&gt;</string>
			</line>
			<line></line>
			<line>
				<comment>/// Filename can be KTX or DDS files</comment>
			</line>
			<line>
				GLuint createTexture(char <keyword>const</keyword>* Filename)
			</line>
			<line>{</line>
			<line align="32px">gli::texture Texture = gli::load(Filename);</line>
			<line align="32px">
				<keyword>if</keyword>(Texture.empty())
			</line>
			<line align="64px">
				<keyword>return</keyword> 0;
			</line>
			<line></line>
			<line align="32px">gli::gl GL;</line>
			<line align="32px">
				gli::gl::format <keyword>const</keyword> Format = GL.translate(Texture.format());
			</line>
			<line align="32px">GLenum Target = GL.translate(Texture.target());</line>
			<line></line>
			<line align="32px">GLuint TextureName = 0;</line>
			<line align="32px">glGenTextures(1, &amp;TextureName);</line>
			<line align="32px">glBindTexture(Target, TextureName);</line>
			<line align="32px">glTexParameteri(Target, GL_TEXTURE_BASE_LEVEL, 0);</line>
			<line align="32px">
				glTexParameteri(Target, GL_TEXTURE_MAX_LEVEL, <keyword>static_cast</keyword>&lt;GLint&gt;(Texture.levels() - 1));
			</line>
			<line align="32px">glTexParameteri(Target, GL_TEXTURE_SWIZZLE_R, Format.Swizzle[0]);</line>
			<line align="32px">glTexParameteri(Target, GL_TEXTURE_SWIZZLE_G, Format.Swizzle[1]);</line>
			<line align="32px">glTexParameteri(Target, GL_TEXTURE_SWIZZLE_B, Format.Swizzle[2]);</line>
			<line align="32px">glTexParameteri(Target, GL_TEXTURE_SWIZZLE_A, Format.Swizzle[3]);</line>
			<line></line>
			<line align="32px">
				glm::tvec3&lt;GLsizei&gt; <keyword>const</keyword> Dimensions(Texture.dimensions());
			</line>
			<line align="32px">
				GLsizei <keyword>const</keyword> FaceTotal = <keyword>static_cast</keyword>&lt;GLsizei&gt;(Texture.layers() * Texture.faces());
			</line>
			<line></line>
			<line align="32px">
				<keyword>switch</keyword>(Texture.target())
			</line>
			<line align="32px">{</line>
			<line align="32px">
				<keyword>case</keyword> gli::TARGET_1D:
			</line>
			<line align="64px">
				glTexStorage1D(Target, <keyword>static_cast</keyword>&lt;GLint&gt;(Texture.levels()), Format.Internal, Dimensions.x);
			</line>
			<line align="64px">
				<keyword>break</keyword>;
			</line>
			<line align="32px">
				<keyword>case</keyword> gli::TARGET_1D_ARRAY:
			</line>
			<line align="32px">
				<keyword>case</keyword> gli::TARGET_2D:
			</line>
			<line align="32px">
				<keyword>case</keyword> gli::TARGET_CUBE:
			</line>
			<line align="64px">glTexStorage2D(</line>
			<line align="96px">
				Target, <keyword>static_cast</keyword>&lt;GLint&gt;(Texture.levels()), Format.Internal,
			</line>
			<line align="96px">Dimensions.x, Texture.target() == gli::TARGET_2D ? Dimensions.y : FaceTotal);</line>
			<line align="64px">
				<keyword>break</keyword>;
			</line>
			<line align="32px">
				<keyword>case</keyword> gli::TARGET_2D_ARRAY:
			</line>
			<line align="32px">
				<keyword>case</keyword> gli::TARGET_3D:
			</line>
			<line align="32px">
				<keyword>case</keyword> gli::TARGET_CUBE_ARRAY:
			</line>
			<line align="64px">glTexStorage3D(</line>
			<line align="96px">
				Target, <keyword>static_cast</keyword>&lt;GLint&gt;(Texture.levels()), Format.Internal,
			</line>
			<line align="96px">Dimensions.x, Dimensions.y, Texture.target() == gli::TARGET_3D ? Dimensions.z : FaceTotal);</line>
			<line align="64px">
				<keyword>break</keyword>;
			</line>
			<line align="32px">
				<keyword>default</keyword>: assert(0); break;
			</line>
			<line align="32px">}</line>
			<line></line>
			<line align="32px">
				<keyword>for</keyword>(std::size_t Layer = 0; Layer &lt; Texture.layers(); ++Layer)
			</line>
			<line align="32px">
				<keyword>for</keyword>(std::size_t Face = 0; Face &lt; Texture.faces(); ++Face)
			</line>
			<line align="32px">
				<keyword>for</keyword>(std::size_t Level = 0; Level &lt; Texture.levels(); ++Level)
			</line>
			<line align="32px">{</line>
			<line align="64px">
				GLsizei <keyword>const</keyword> LayerGL = <keyword>static_cast</keyword>&lt;GLsizei&gt;(Layer);
			</line>
			<line align="64px">glm::tvec3&lt;GLsizei&gt; Dimensions(Texture.dimensions(Level));</line>
			<line align="64px">
				<keyword>if</keyword>(gli::is_target_cube(Texture.target()))
			</line>
			<line align="96px">
				Target = <keyword>static_cast</keyword>&lt;GLenum&gt;(GL_TEXTURE_CUBE_MAP_POSITIVE_X + Face);
			</line>
			<line></line>
			<line align="64px">
				<keyword>switch</keyword>(Texture.target())
			</line>
			<line align="64px">{</line>
			<line align="64px">
				<keyword>case</keyword> gli::TARGET_1D:
			</line>
			<line align="96px">
				<keyword>if</keyword>(gli::is_compressed(Texture.format()))
			</line>
			<line align="128px">glCompressedTexSubImage1D(</line>
			<line align="160px">
				Target, <keyword>static_cast</keyword>&lt;GLint&gt;(Level), 0, Dimensions.x,
			</line>
			<line align="160px">
				Format.Internal, <keyword>static_cast</keyword>&lt;GLsizei&gt;(Texture.size(Level)),
			</line>
			<line align="160px">Texture.data(Layer, Face, Level));</line>
			<line align="96px">
				<keyword>else</keyword>
			</line>
			<line align="128px">glTexSubImage1D(</line>
			<line align="160px">
				Target, <keyword>static_cast</keyword>&lt;GLint&gt;(Level), 0, Dimensions.x, Format.External, Format.Type,
			</line>
			<line align="160px">Texture.data(Layer, Face, Level));</line>
			<line align="96px">
				<keyword>break</keyword>;
			</line>
			<line align="64px">
				<keyword>case</keyword> gli::TARGET_1D_ARRAY:
			</line>
			<line align="64px">
				<keyword>case</keyword> gli::TARGET_2D:
			</line>
			<line align="64px">
				<keyword>case</keyword> gli::TARGET_CUBE:
			</line>
			<line align="96px">
				<keyword>if</keyword>(gli::is_compressed(Texture.format()))
			</line>
			<line align="128px">glCompressedTexSubImage2D(</line>
			<line align="160px">
				Target, <keyword>static_cast</keyword>&lt;GLint&gt;(Level), 0, 0,
			</line>
			<line align="160px">Dimensions.x, Texture.target() == gli::TARGET_1D_ARRAY ? : Dimensions.y,</line>
			<line align="160px">
				Format.Internal, <keyword>static_cast</keyword>&lt;GLsizei&gt;(Texture.size(Level)),
			</line>
			<line align="160px">Texture.data(Layer, Face, Level));</line>
			<line align="96px">
				<keyword>else</keyword>
			</line>
			<line align="128px">glTexSubImage2D(</line>
			<line align="160px">
				Target, <keyword>static_cast</keyword>&lt;GLint&gt;(Level), 0, 0,
			</line>
			<line align="160px">Dimensions.x, Texture.target() == gli::TARGET_1D_ARRAY ? LayerGL : Dimensions.y,</line>
			<line align="160px">Format.External, Format.Type, Texture.data(Layer, Face, Level));</line>
			<line align="96px">
				<keyword>break;</keyword>
			</line>
			<line align="64px">
				<keyword>case</keyword> gli::TARGET_2D_ARRAY:
			</line>
			<line align="64px">
				<keyword>case</keyword> gli::TARGET_3D:
			</line>
			<line align="64px">
				<keyword>case</keyword> gli::TARGET_CUBE_ARRAY:
			</line>
			<line align="96px">
				<keyword>if</keyword>(gli::is_compressed(Texture.format()))
			</line>
			<line align="128px">glCompressedTexSubImage3D(</line>
			<line align="160px">
				Target, <keyword>static_cast</keyword>&lt;GLint&gt;(Level), 0, 0, 0,
			</line>
			<line align="160px">Dimensions.x, Dimensions.y, Texture.target() == gli::TARGET_3D ? Dimensions.z : LayerGL,</line>
			<line align="160px">
				Format.Internal, <keyword>static_cast</keyword>&lt;GLsizei&gt;(Texture.size(Level)),
			</line>
			<line align="160px">Texture.data(Layer, Face, Level));</line>
			<line align="96px">
				<keyword>else</keyword>
			</line>
			<line align="128px">glTexSubImage3D(</line>
			<line align="160px">
				Target, <keyword>static_cast</keyword>&lt;GLint&gt;(Level), 0, 0, 0,
			</line>
			<line align="160px">Dimensions.x, Dimensions.y, Texture.target() == gli::TARGET_3D ? Dimensions.z : LayerGL,</line>
			<line align="160px">Format.External, Format.Type, Texture.data(Layer, Face, Level));</line>
			<line align="96px">
				<keyword>break</keyword>;
			</line>
			<line align="64px">
				<keyword>default</keyword>: assert(0); <keyword>break</keyword>;
			</line>
			<line align="64px">}</line>
			<line align="32px">}</line>
			<line align="32px">
				<keyword>return</keyword> TextureName;
			</line>
			<line>}</line>
		</code>
	</about-long>

	<about-long version="0.6">
		<paragraph>
			OpenGL Image (GLI) is a header only C++ image library for graphics software.
		</paragraph>
		<paragraph>
			This library works perfectly with <link href="https://www.opengl.org">OpenGL</link> but it also ensures interoperability with other third party libraries and SDK. It is a good candidate for software rendering (raytracing / rasterisation), image processing, physic simulations and any development context that requires a simple and convenient mathematics library.
		</paragraph>
		<list title="GLI is written in C++11. It is a platform independent library with no dependence and it supports the following compilers:">
			<entry>
				<link href="https://developer.apple.com/library/mac/documentation/CompilerTools/Conceptual/LLVMCompilerOverview/index.html">Apple Clang</link> 4.0 and higher
			</entry>
			<entry>
				<link href="http://gcc.gnu.org/">GCC</link> 4.6 and higher
			</entry>
			<entry>
				<link href="https://software.intel.com/en-us/intel-compilers">Intel C++ Composer</link> XE 2013 and higher
			</entry>
			<entry>
				<link href="http://llvm.org/">LLVM</link> 3.2 and higher
			</entry>
			<entry>
				<link href="http://www.visualstudio.com/">Visual Studio</link> 2012 and higher
			</entry>
			<entry>
				Any conform C++11 compiler
			</entry>
		</list>
		<paragraph>
			For more information about GLI, please have a look at <link href="../0.6.1/api/index.html">the API reference documentation</link>.
		</paragraph>
		<paragraph>
			The source code and the documentation, including this manual, are licensed under the 
			<link href="http://glm.g-truc.net/copying.txt">Happy Bunny License (Modified MIT) or the MIT License</link>.
		</paragraph>
		<paragraph>
			Thanks for contributing to the project by <link href="https://github.com/g-truc/gli/issues">submitting issues</link> for bug reports and feature requests. Any feedback is welcome at <link href="mailto://gli@g-truc.net">gli@g-truc.net</link>.
		</paragraph>
		<code title="Code sample:">
			<line><keyword>#include </keyword><string>&lt;gli/gli.hpp&gt;</string></line>
			<line></line>
			<line>GLuint CreateTextureArray(<keyword>char </keyword><keyword>const</keyword>* Filename)</line>
			<line>{</line>
			<line align="32px">gli::texture2DArray Texture(gli::load_dds(Filename));</line>
			<line align="32px"><keyword>if</keyword>(Texture.empty())</line>
			<line align="64px"><keyword>return</keyword> 0;</line>
			<line></line>
			<line align="32px">gli::gl GL;</line>
			<line align="32px">gli::gl::format <keyword>const</keyword> Format = GL.translate(Texture.format());</line>
			<line></line>
			<line align="32px">GLuint TextureName = 0;</line>
			<line align="32px">glGenTextures(1, &amp;TextureName);</line>
			<line align="32px">glBindTexture(GL_TEXTURE_2D_ARRAY, TextureName);</line>
			<line></line>
			<line align="32px">glTexParameteri(GL_TEXTURE_2D_ARRAY, GL_TEXTURE_BASE_LEVEL, 0);</line>
			<line align="32px">glTexParameteri(GL_TEXTURE_2D_ARRAY, GL_TEXTURE_MAX_LEVEL, <keyword>static_cast</keyword>&lt;GLint&gt;(Texture.levels() - 1));</line>
			<line align="32px">glTexParameteri(GL_TEXTURE_2D_ARRAY, GL_TEXTURE_SWIZZLE_R, Format.Swizzle[0]);</line>
			<line align="32px">glTexParameteri(GL_TEXTURE_2D_ARRAY, GL_TEXTURE_SWIZZLE_G, Format.Swizzle[1]);</line>
			<line align="32px">glTexParameteri(GL_TEXTURE_2D_ARRAY, GL_TEXTURE_SWIZZLE_B, Format.Swizzle[2]);</line>
			<line align="32px">glTexParameteri(GL_TEXTURE_2D_ARRAY, GL_TEXTURE_SWIZZLE_A, Format.Swizzle[3]);</line>
			<line></line>
			<line align="32px">glTexStorage3D(GL_TEXTURE_2D_ARRAY, <keyword>static_cast</keyword>&lt;GLint&gt;(Texture.levels()),</line>
			<line align="64px">Format.Internal,</line>
			<line align="64px"><keyword>static_cast</keyword>&lt;GLsizei&gt;(Texture.dimensions().x),</line>
			<line align="64px"><keyword>static_cast</keyword>&lt;GLsizei&gt;(Texture.dimensions().y),</line>
			<line align="64px"><keyword>static_cast</keyword>&lt;GLsizei&gt;(1));</line>
			<line></line>
			<line align="32px"><keyword>if</keyword>(gli::is_compressed(Texture.format()))</line>
			<line align="32px">{</line>
			<line align="64px"><keyword>for</keyword>(std::size_t Level = 0; Level &lt; Texture.levels(); ++Level)</line>
			<line align="64px">{</line>
			<line align="96px">glCompressedTexSubImage3D(GL_TEXTURE_2D_ARRAY, <keyword>static_cast</keyword>&lt;GLint&gt;(Level),</line>
			<line align="128px">0, 0, 0,</line>
			<line align="128px"><keyword>static_cast</keyword>&lt;GLsizei&gt;(Texture[Level].dimensions().x),</line>
			<line align="128px"><keyword>static_cast</keyword>&lt;GLsizei&gt;(Texture[Level].dimensions().y),</line>
			<line align="128px"><keyword>static_cast</keyword>&lt;GLsizei&gt;(1),</line>
			<line align="128px">Format.External,</line>
			<line align="128px"><keyword>static_cast</keyword>&lt;GLsizei&gt;(Texture[Level].size()),</line>
			<line align="128px">Texture[Level].data());</line>
			<line align="64px">}</line>
			<line align="32px">}</line>
			<line align="32px"><keyword>else</keyword></line>
			<line align="32px">{</line>
			<line align="64px"><keyword>for</keyword>(std::size_t Level = 0; Level &lt; Texture.levels(); ++Level)</line>
			<line align="64px">{</line>
			<line align="96px">glTexSubImage3D(GL_TEXTURE_2D_ARRAY, <keyword>static_cast</keyword>&lt;GLint&gt;(Level),</line>
			<line align="128px">0, 0, 0,</line>
			<line align="128px"><keyword>static_cast</keyword>&lt;GLsizei&gt;(Texture[Level].dimensions().x),</line>
			<line align="128px"><keyword>static_cast</keyword>&lt;GLsizei&gt;(Texture[Level].dimensions().y),</line>
			<line align="128px"><keyword>static_cast</keyword>&lt;GLsizei&gt;(1),</line>
			<line align="128px">Format.External, Format.Type,</line>
			<line align="128px">Texture[Level].data());</line>
			<line align="64px">}</line>
			<line align="32px">}</line>
			<line></line>
			<line align="32px"><keyword>return</keyword> TextureName;</line>
			<line>}</line>
		</code>
	</about-long>

	<about-short>
		Effective texture loading, access and processing.
	</about-short>
	<about-short>
		A C++ image library based on OpenGL conventions
	</about-short>
</website>
