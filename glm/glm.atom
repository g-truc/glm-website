<?xml version="1.0" encoding="utf-8" standalone="no"?><!DOCTYPE feed PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<feed xmlns="http://www.w3.org/2005/Atom"><title>OpenGL Mathematics</title><subtitle>OpenGL Mathematics</subtitle><link href="http://glm.g-truc.net/feed.atom" type="application/atom+xml" rel="self" /><link href="http://glm.g-truc.net/index.html" lang="en" type="text/html" rel="alternate" /><id>http://glm.g-truc.net/index.html</id><updated>2016-03-19T23:30:00.00Z</updated><author><name /></author><entry><title>GLM 0.9.7.4 released</title><link href="http://glm.g-truc.net/feed.atom" type="application/atom+xml" rel="self" lang="en" /><link href="http://glm.g-truc.net/index.html" type="text/html" rel="alternate" lang="en" /><id>http://glm.g-truc.netindex0102.html</id><updated>2016-03-19T23:30:00.00Z</updated><content xml:lang="en" type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml" class="atom-content"><p><ul><li class="title">Improvements:</li><li>Added AVX512 detection</li></ul></p><p><ul><li class="title">Fixes:</li><li>Fixed asinh and atanh warning with C++98 STL #484</li><li>Fixed polar coordinates function latitude #485</li><li>Fixed outerProduct defintions and operator signatures for mat2x4 and vec4 #475</li><li>Fixed eulerAngles precision error, returns NaN  #451</li><li>Fixed undefined reference errors #489</li><li>Fixed missing GLM_PLATFORM_CYGWIN declaration #495</li><li>Fixed various undefined reference errors #490</li></ul></p><li>Download: <a href="https://github.com/g-truc/glm/releases/download/0.9.7.4/glm-0.9.7.4.zip">GLM 0.9.7.4</a> (<a href="https://github.com/g-truc/glm/releases/download/0.9.7.4/glm-0.9.7.4.zip">ZIP, 4.2 MB</a>)  (<a href="https://github.com/g-truc/glm/releases/download/0.9.7.4/glm-0.9.7.4.7z">7Z, 2.8 MB</a>) </li></div></content></entry><entry><title>GLM 0.9.7.3 released</title><link href="http://glm.g-truc.net/feed.atom" type="application/atom+xml" rel="self" lang="en" /><link href="http://glm.g-truc.net/index.html" type="text/html" rel="alternate" lang="en" /><id>http://glm.g-truc.netindex0101.html</id><updated>2016-02-21T23:30:00.00Z</updated><content xml:lang="en" type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml" class="atom-content"><p><ul><li class="title">Improvements:</li><li>Added AVX512 detection</li></ul></p><p><ul><li class="title">Fixes:</li><li>Fixed CMake policy warning</li><li>Fixed GCC 6.0 detection #477</li><li>Fixed Clang build on Windows #479</li><li>Fixed 64 bits constants warnings on GCC #463</li></ul></p><li>Download: <a href="https://github.com/g-truc/glm/releases/download/0.9.7.3/glm-0.9.7.3.zip">GLM 0.9.7.3</a> (<a href="https://github.com/g-truc/glm/releases/download/0.9.7.3/glm-0.9.7.3.zip">ZIP, 4.2 MB</a>)  (<a href="https://github.com/g-truc/glm/releases/download/0.9.7.3/glm-0.9.7.3.7z">7Z, 2.8 MB</a>) </li></div></content></entry><entry><title>GLM 0.9.7.2 released</title><link href="http://glm.g-truc.net/feed.atom" type="application/atom+xml" rel="self" lang="en" /><link href="http://glm.g-truc.net/index.html" type="text/html" rel="alternate" lang="en" /><id>http://glm.g-truc.netindex0100.html</id><updated>2016-01-03T23:30:00.00Z</updated><content xml:lang="en" type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml" class="atom-content"><p><ul><li class="title">Fixes:</li><li>Fixed GTC_round floorMultiple/ceilMultiple #412</li><li>Fixed GTC_packing unpackUnorm3x10_1x2 #414</li><li>Fixed GTC_matrix_inverse affineInverse #192</li><li>Fixed ICC on Linux build errors #449</li><li>Fixed ldexp and frexp compilation errors #456 #466 </li><li>Fixed "Declaration shadows a field" warning #468</li><li>Fixed 'GLM_COMPILER_VC2005 is not defined' warning #468</li><li>Fixed various 'X is not defined' warnings #468</li><li>Fixed missing unary + operator #435</li><li>Fixed Cygwin build errors when using C++11 #405</li></ul></p><li>Download: <a href="https://github.com/g-truc/glm/releases/download/0.9.7.2/glm-0.9.7.2.zip">GLM 0.9.7.2</a> (<a href="https://github.com/g-truc/glm/releases/download/0.9.7.2/glm-0.9.7.2.zip">ZIP, 4.2 MB</a>)  (<a href="https://github.com/g-truc/glm/releases/download/0.9.7.2/glm-0.9.7.2.7z">7Z, 2.8 MB</a>) </li></div></content></entry><entry><title>GLM 0.9.7.1 released</title><link href="http://glm.g-truc.net/feed.atom" type="application/atom+xml" rel="self" lang="en" /><link href="http://glm.g-truc.net/index.html" type="text/html" rel="alternate" lang="en" /><id>http://glm.g-truc.netindex0099.html</id><updated>2015-09-07T23:30:00.00Z</updated><content xml:lang="en" type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml" class="atom-content"><p><ul><li class="title">Improvements:</li><li>Improved constexpr for constant functions coverage #198</li><li>Added to_string for quat and dual_quat in GTX_string_cast #375</li><li>Improved overall execution time of unit tests #396</li></ul></p><p><ul><li class="title">Fixes:</li><li>Fixed strict alignment warnings #235 #370</li><li>Fixed link errors on compilers not supported default function #377</li><li>Fixed compilation warnings in vec4</li><li>Fixed non-identity quaternions for equal vectors #234</li><li>Fixed excessive GTX_fast_trigonometry execution time #396</li><li>Fixed Visual Studio 2015 'hides class member' warnings #394</li><li>Fixed builtin bitscan never being used #392</li><li>Removed unused func_noise.* files #398</li></ul></p><li>Download: <a href="https://github.com/g-truc/glm/releases/download/0.9.7.1/glm-0.9.7.1.zip">GLM 0.9.7.1</a> (<a href="https://github.com/g-truc/glm/releases/download/0.9.7.1/glm-0.9.7.1.zip">ZIP, 4.2 MB</a>)  (<a href="https://github.com/g-truc/glm/releases/download/0.9.7.1/glm-0.9.7.1.7z">7Z, 2.8 MB</a>) </li></div></content></entry><entry><title>GLM 0.9.7.0 released</title><link href="http://glm.g-truc.net/feed.atom" type="application/atom+xml" rel="self" lang="en" /><link href="http://glm.g-truc.net/index.html" type="text/html" rel="alternate" lang="en" /><id>http://glm.g-truc.netindex0098.html</id><updated>2015-08-02T23:30:00.00Z</updated><content xml:lang="en" type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml" class="atom-content"><p><ul><li class="title">Features:</li><li>Added GTC_color_space: convertLinearToSRGB and convertSRGBToLinear functions</li><li>Added 'fmod' overload to GTX_common with tests #308</li><li>Added left handed perspective and lookAt functions #314</li><li>Added functions eulerAngleXYZ and extractEulerAngleXYZ #311</li><li>Added GTX_hash to perform std::hash on GLM types #320 #367</li><li>Added GTX_wrap for texcoord wrapping</li><li>Added static components and precision members to all vector and quat types #350</li><li>Added .gitignore #349</li><li>Added support of defaulted functions to GLM types, to use them in unions #366</li></ul></p><p><ul><li class="title">Improvements:</li><li>Changed usage of __has_include to support Intel compiler #307</li><li>Specialized integer implementation of YCoCg-R #310</li><li>Don't show status message in 'FindGLM' if 'QUIET' option is set. #317</li><li>Added master branch continuous integration service on Linux 64 #332</li><li>Clarified manual regarding angle unit in GLM, added FAQ 11 #326</li><li>Updated list of compiler versions</li></ul></p><p><ul><li class="title">Fixes:</li><li>Fixed default precision for quat and dual_quat type #312</li><li>Fixed (u)int64 MSB/LSB handling on BE archs #306</li><li>Fixed multi-line comment warning in g++ #315</li><li>Fixed specifier removal by 'std::make_pair' #333</li><li>Fixed perspective fovy argument documentation #327</li><li>Removed -m64 causing build issues on Linux 32 #331</li><li>Fixed isfinite with C++98 compilers #343</li><li>Fixed Intel compiler build error on Linux #354</li><li>Fixed use of libstdc++ with Clang #351</li><li>Fixed quaternion pow #346</li><li>Fixed decompose warnings #373</li><li>Fixed matrix conversions #371</li></ul></p><p><ul><li class="title">Deprecation:</li><li>Removed integer specification for 'mod' in GTC_integer #308</li><li>Removed GTX_multiple, replaced by GTC_round</li></ul></p><li>Download: <a href="https://github.com/g-truc/glm/releases/download/0.9.7.0/glm-0.9.7.0.zip">GLM 0.9.7.0</a> (<a href="https://github.com/g-truc/glm/releases/download/0.9.7.0/glm-0.9.7.0.zip">ZIP, 4.2 MB</a>)  (<a href="https://github.com/g-truc/glm/releases/download/0.9.7.0/glm-0.9.7.0.7z">7Z, 2.8 MB</a>) </li></div></content></entry><entry><title>GLM 0.9.6.3 released</title><link href="http://glm.g-truc.net/feed.atom" type="application/atom+xml" rel="self" lang="en" /><link href="http://glm.g-truc.net/index.html" type="text/html" rel="alternate" lang="en" /><id>http://glm.g-truc.netindex0097.html</id><updated>2015-02-15T23:30:00.00Z</updated><content xml:lang="en" type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml" class="atom-content"><p><ul><li class="title">Fixes:</li><li>Fixed Android doesn't have C++ 11 STL #284</li></ul></p><li>Download: <a href="https://github.com/g-truc/glm/releases/download/0.9.6.3/glm-0.9.6.3.zip">GLM 0.9.6.3</a> (<a href="https://github.com/g-truc/glm/releases/download/0.9.6.3/glm-0.9.6.3.zip">ZIP, 4.1 MB</a>)  (<a href="https://github.com/g-truc/glm/releases/download/0.9.6.3/glm-0.9.6.3.7z">7Z, 2.7 MB</a>) </li></div></content></entry><entry><title>GLM 0.9.6.2 released</title><link href="http://glm.g-truc.net/feed.atom" type="application/atom+xml" rel="self" lang="en" /><link href="http://glm.g-truc.net/index.html" type="text/html" rel="alternate" lang="en" /><id>http://glm.g-truc.netindex0096.html</id><updated>2015-02-15T23:30:00.00Z</updated><content xml:lang="en" type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml" class="atom-content"><p><ul><li class="title">Features:</li><li>Added display of GLM version with other GLM_MESSAGES</li><li>Added ARM instruction set detection</li></ul></p><p><ul><li class="title">Improvements:</li><li>Removed assert for perspective with zFar &lt; zNear #298</li><li>Added Visual Studio natvis support for vec1, quat and dualqual types</li><li>Cleaned up C++11 feature detections</li><li>Clarify GLM licensing</li></ul></p><p><ul><li class="title">Fixes:</li><li>Fixed faceforward build #289</li><li>Fixed conflict with Xlib #define True 1 #293</li><li>Fixed decompose function VS2010 templating issues #294</li><li>Fixed mat4x3 = mat2x3 * mat4x2 operator #297</li><li>Fixed warnings in F2x11_1x10 packing function in GTC_packing #295</li><li>Fixed Visual Studio natvis support for vec4 #288</li><li>Fixed GTC_packing *pack*norm*x* build and added tests #292</li><li>Disabled GTX_scalar_multiplication for GCC, failing to build tests #242</li><li>Fixed Visual C++ 2015 constexpr errors: Disabled only partial support</li><li>Fixed functions not inlined with Clang #302</li><li>Fixed memory corruption (undefined behaviour) #303</li></ul></p><li>Download: <a href="https://github.com/g-truc/glm/releases/download/0.9.6.2/glm-0.9.6.2.zip">GLM 0.9.6.2</a> (<a href="https://github.com/g-truc/glm/releases/download/0.9.6.2/glm-0.9.6.2.zip">ZIP, 4.1 MB</a>)  (<a href="https://github.com/g-truc/glm/releases/download/0.9.6.2/glm-0.9.6.2.7z">7Z, 2.7 MB</a>) </li></div></content></entry><entry><title>GLM 0.9.6.1 released</title><link href="http://glm.g-truc.net/feed.atom" type="application/atom+xml" rel="self" lang="en" /><link href="http://glm.g-truc.net/index.html" type="text/html" rel="alternate" lang="en" /><id>http://glm.g-truc.netindex0095.html</id><updated>2014-12-10T23:30:00.00Z</updated><content xml:lang="en" type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml" class="atom-content"><p>
			GLM 0.9.6.0 came with its set of major glitches: C++98 only mode, 32 bit build, Cuda and Android support should all be fixed in GLM 0.9.6.1 release.
		</p><p><ul><li class="title">Features:</li><li>Added GLM_LANG_CXX14_FLAG and GLM_LANG_CXX1Z_FLAG language feature flags</li><li>Added C++14 detection</li></ul></p><p><ul><li class="title">Improvements:</li><li>Clean up GLM_MESSAGES compilation log to report only detected capabilities</li></ul></p><p><ul><li class="title">Fixes:</li><li>Fixed scalar uaddCarry build error with Cuda #276</li><li>Fixed C++11 explicit conversion operators detection #282</li><li>Fixed missing explicit convertion when using integer log2 with *vec1 types</li><li>Fixed 64 bits integer GTX_string_cast to_string on VC 32 bit compiler</li><li>Fixed Android build issue, STL C++11 is not supported by the NDK #284</li><li>Fixed unsupported _BitScanForward64 and _BitScanReverse64 in VC10</li><li>Fixed Visual C++ 32 bit build #283</li><li>Fixed GLM_FORCE_SIZE_FUNC pragma message</li><li>Fixed C++98 only build</li><li>Fixed conflict between GTX_compatibility and GTC_quaternion #286</li><li>Fixed C++ language restriction using GLM_FORCE_CXX**</li></ul></p><li>Download: <a href="https://github.com/g-truc/glm/releases/download/0.9.6.1/glm-0.9.6.1.zip">GLM 0.9.6.1</a> (<a href="https://github.com/g-truc/glm/releases/download/0.9.6.1/glm-0.9.6.1.zip">ZIP, 4.1 MB</a>)  (<a href="https://github.com/g-truc/glm/releases/download/0.9.6.1/glm-0.9.6.1.7z">7Z, 2.7 MB</a>) </li></div></content></entry><entry><title>GLM 0.9.6.0 released</title><link href="http://glm.g-truc.net/feed.atom" type="application/atom+xml" rel="self" lang="en" /><link href="http://glm.g-truc.net/index.html" type="text/html" rel="alternate" lang="en" /><id>http://glm.g-truc.netindex0094.html</id><updated>2014-11-30T23:30:00.00Z</updated><content xml:lang="en" type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml" class="atom-content"><p>
			GLM 0.9.6.0 is available with many changes.
		</p><h5>Transition from degrees to radians compatibility break and GLM 0.9.5.4 help</h5><p>
			One of the long term issue with GLM is that some functions were using radians, functions from GLSL and others were using degrees, functions from GLU or legacy OpenGL.
		</p><p>
			In GLM 0.9.5, we can use <span class="codeword">GLM_FORCE_RADIANS</span> to force all GLM functions to adopt radians.
		</p><span class="code-title">In GLM 0.9.5 in degrees:</span><ul class="code-list"><li class="code-line"><span class="code-line-content"><span class="keyword">#include </span><span class="string">&lt;glm/mat4.hpp&gt;</span></span></li><li class="code-line"><span class="code-line-content"><span class="keyword">#include </span><span class="string">&lt;glm/gtc/matrix_tansform.hpp&gt;</span></span></li><li class="code-line"><span class="code-line-content" /></li><li class="code-line"><span class="code-line-content">
				glm::mat4 my_rotateZ(glm::mat4 <span class="keyword">const</span> &amp; m, <span class="keyword">float</span> angleInRadians)
			</span></li><li class="code-line"><span class="code-line-content">{</span></li><li class="code-line"><span style="padding-left:32px" class="code-line-content"><span class="keyword">return</span> glm::rotate(m, glm::degrees(angleInRadians), glm::vec3(0.0, 0.0, 1.0));
			</span></li><li class="code-line"><span class="code-line-content">}</span></li></ul><span class="code-title">In GLM 0.9.5 in radians:</span><ul class="code-list"><li class="code-line"><span class="code-line-content"><span class="keyword">#define </span> GLM_FORCE_RADIANS
			</span></li><li class="code-line"><span class="code-line-content"><span class="keyword">#include </span><span class="string">&lt;glm/mat4.hpp&gt;</span></span></li><li class="code-line"><span class="code-line-content"><span class="keyword">#include </span><span class="string">&lt;glm/gtc/matrix_tansform.hpp&gt;</span></span></li><li class="code-line"><span class="code-line-content" /></li><li class="code-line"><span class="code-line-content">
				glm::mat4 my_rotateZ(glm::mat4 <span class="keyword">const</span> &amp; m, <span class="keyword">float</span> angleInRadians)
			</span></li><li class="code-line"><span class="code-line-content">{</span></li><li class="code-line"><span style="padding-left:32px" class="code-line-content"><span class="keyword">return</span> glm::rotate(m, angleInRadians, glm::vec3(0.0, 0.0, 1.0));
			</span></li><li class="code-line"><span class="code-line-content">}</span></li></ul><span class="code-title">In GLM 0.9.6 in radians only:</span><ul class="code-list"><li class="code-line"><span class="code-line-content"><span class="keyword">#include </span><span class="string">&lt;glm/mat4.hpp&gt;</span></span></li><li class="code-line"><span class="code-line-content"><span class="keyword">#include </span><span class="string">&lt;glm/gtc/matrix_tansform.hpp&gt;</span></span></li><li class="code-line"><span class="code-line-content" /></li><li class="code-line"><span class="code-line-content">
				glm::mat4 my_rotateZ(glm::mat4 <span class="keyword">const</span> &amp; m, <span class="keyword">float</span> angleInRadians)
			</span></li><li class="code-line"><span class="code-line-content">{</span></li><li class="code-line"><span style="padding-left:32px" class="code-line-content"><span class="keyword">return</span> glm::rotate(m, angleInRadians, glm::vec3(0.0, 0.0, 1.0));
			</span></li><li class="code-line"><span class="code-line-content">}</span></li></ul><span class="code-title">In GLM 0.9.6 if you what to use degrees anyway:</span><ul class="code-list"><li class="code-line"><span class="code-line-content"><span class="keyword">#include </span><span class="string">&lt;glm/mat4.hpp&gt;</span></span></li><li class="code-line"><span class="code-line-content"><span class="keyword">#include </span><span class="string">&lt;glm/gtc/matrix_tansform.hpp&gt;</span></span></li><li class="code-line"><span class="code-line-content" /></li><li class="code-line"><span class="code-line-content">
				glm::mat4 my_rotateZ(glm::mat4 <span class="keyword">const</span> &amp; m, <span class="keyword">float</span> angleInDegrees)
			</span></li><li class="code-line"><span class="code-line-content">{</span></li><li class="code-line"><span style="padding-left:32px" class="code-line-content"><span class="keyword">return</span> glm::rotate(m, glm::radians(angleInDegrees), glm::vec3(0.0, 0.0, 1.0));
			</span></li><li class="code-line"><span class="code-line-content">}</span></li></ul><p>
			GLM 0.9.5 will show warning messages at compilation each time a function taking degrees is used.
		</p>
			GLM: rotate function taking degrees as a parameter is deprecated. <span class="codeword">#define GLM_FORCE_RADIANS</span> before including GLM headers to remove this message.
		<p>
			If you are using a version of GLM older than GLM 0.9.5.1, update to <a href="./post-0660.html">GLM 0.9.5.4</a> before transitioning to GLM 0.9.6 to get this help in that process.
		</p>Make sure to build and run successfully your application with GLM 0.9.5 with GLM_FORCE_RADIANS, before transistioning to GLM 0.9.6<p>
			Finally, here is a list of all the functions that could use degrees in GLM 0.9.5.4 that requires radians in GLM 0.9.6:
			<span class="codeword">rotate</span> (matrices and quaternions),
			<span class="codeword">perspective</span>,
			<span class="codeword">perspectiveFov</span>,
			<span class="codeword">infinitePerspective</span>,
			<span class="codeword">tweakedInfinitePerspective</span>,
			<span class="codeword">roll</span>,
			<span class="codeword">pitch</span>,
			<span class="codeword">yaw</span>,
			<span class="codeword">angle</span>,
			<span class="codeword">angleAxis</span>,
			<span class="codeword">polar</span>,
			<span class="codeword">euclidean</span>,
			<span class="codeword">rotateNormalizedAxis</span>,
			<span class="codeword">rotateX</span>,
			<span class="codeword">rotateY</span>,
			<span class="codeword">rotateZ</span> and
			<span class="codeword">orientedAngle</span>.
		</p><h5>Using GLM template types</h5><p>
			There are a lot of reasons for using template types: Writing new template classes and functions or defining new types.
			Unfortunately, until GLM 0.9.5, GLM template types were defined into the <span class="codeword">detail</span> namespace indicating there are implementation details that may changed.
		</p><p>
			With GLM 0.9.6, template types are accessible from the GLM namespace and guarantee to be stable onward.
		</p><span class="code-title">Example of template functions, GLM 0.9.5 and 0.9.6 style:</span><ul class="code-list"><li class="code-line"><span class="code-line-content"><span class="keyword">#include </span><span class="string">&lt;glm/geometry.hpp&gt;</span></span></li><li class="code-line"><span class="code-line-content"><span class="keyword">#include </span><span class="string">&lt;glm/exponential.hpp&gt;</span></span></li><li class="code-line"><span class="code-line-content" /></li><li class="code-line"><span class="code-line-content"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> vecType&gt;
			</span></li><li class="code-line"><span class="code-line-content"><span class="keyword">typename</span> vecType::value_type normalizeDot(vecType <span class="keyword">const</span> &amp; a, vecType <span class="keyword">const</span> &amp; b)
			</span></li><li class="code-line"><span class="code-line-content">{</span></li><li class="code-line"><span style="padding-left:32px" class="code-line-content"><span class="keyword">return</span> glm::dot(a, b) * glm::inversesqrt(glm::dot(a, a) * glm::dot(b, b));
			</span></li><li class="code-line"><span class="code-line-content">}</span></li><li class="code-line"><span class="code-line-content" /></li><li class="code-line"><span class="code-line-content"><span class="keyword">#include </span><span class="string">&lt;glm/vec4.hpp&gt;</span></span></li><li class="code-line"><span class="code-line-content" /></li><li class="code-line"><span class="code-line-content"><span class="keyword">int</span> main()
			</span></li><li class="code-line"><span class="code-line-content">{</span></li><li class="code-line"><span style="padding-left:32px" class="code-line-content"><span class="keyword">return</span> normalizeDot(glm::vec4(2.0), glm::vec4(2.0)) &gt; 0.0f ? 0 : 1
			</span></li><li class="code-line"><span class="code-line-content">}</span></li></ul><span class="code-title">Example of template functions, alternative GLM 0.9.6 style:</span><ul class="code-list"><li class="code-line"><span class="code-line-content"><span class="keyword">#include </span><span class="string">&lt;glm/geometry.hpp&gt;</span></span></li><li class="code-line"><span class="code-line-content"><span class="keyword">#include </span><span class="string">&lt;glm/exponential.hpp&gt;</span></span></li><li class="code-line"><span class="code-line-content" /></li><li class="code-line"><span class="code-line-content"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">template</span> &lt;<span class="keyword">typename</span>, glm::precision&gt; <span class="keyword">class</span> vecType&gt;
			</span></li><li class="code-line"><span class="code-line-content">
				T normalizeDot(vecType&lt;T, P&gt; <span class="keyword">const</span> &amp; a, vecType&lt;T, P&gt; <span class="keyword">const</span> &amp; b)
			</span></li><li class="code-line"><span class="code-line-content">{</span></li><li class="code-line"><span style="padding-left:32px" class="code-line-content"><span class="keyword">return</span> glm::dot(a, b) * glm::inversesqrt(glm::dot(a, a) * glm::dot(b, b));
			</span></li><li class="code-line"><span class="code-line-content">}</span></li><li class="code-line"><span class="code-line-content" /></li><li class="code-line"><span class="code-line-content"><span class="keyword">#include </span><span class="string">&lt;glm/vec4.hpp&gt;</span></span></li><li class="code-line"><span class="code-line-content" /></li><li class="code-line"><span class="code-line-content"><span class="keyword">int</span> main()
			</span></li><li class="code-line"><span class="code-line-content">{</span></li><li class="code-line"><span style="padding-left:32px" class="code-line-content"><span class="keyword">return</span> normalizeDot(glm::vec4(2.0), glm::vec4(2.0)) &gt; 0.0f ? 0 : 1
			</span></li><li class="code-line"><span class="code-line-content">}</span></li></ul><span class="code-title">Example of typedefs with GLM 0.9.6:</span><ul class="code-list"><li class="code-line"><span class="code-line-content"><span class="keyword">#include </span><span class="string">&lt;cstddef&gt;</span></span></li><li class="code-line"><span class="code-line-content"><span class="keyword">#include </span><span class="string">&lt;glm/vec4.hpp&gt;</span></span></li><li class="code-line"><span class="code-line-content"><span class="keyword">#include </span><span class="string">&lt;glm/mat4.hpp&gt;</span></span></li><li class="code-line"><span class="code-line-content" /></li><li class="code-line"><span class="code-line-content"><span class="keyword">typedef </span> glm::tvec4&lt;std::size_t&gt; size4;
			</span></li><li class="code-line"><span class="code-line-content"><span class="keyword">typedef </span> glm::tvec4&lt;<span class="keyword">long double</span>, glm::highp&gt; ldvec4;
			</span></li><li class="code-line"><span class="code-line-content"><span class="keyword">typedef </span> glm::tmat4x4&lt;<span class="keyword">long double</span>, glm::highp&gt; ldmat4x4;
			</span></li></ul><h5>Optimizations</h5><p>
			With GLM 0.9.5, the library started to tackle the issue of compilation time by introducing forward declarations through <span class="codeword">&lt;glm/fwd.hpp&gt;</span> but also by providing an alternative to the monolithic <span class="codeword">&lt;glm/glm.hpp&gt;</span> headers with <span class="codeword">&lt;glm/vec2.hpp&gt;</span>, <span class="codeword">&lt;glm/mat3x2.hpp&gt;</span> and <span class="codeword">&lt;glm/common.hpp&gt;</span>, etc.
		</p><p>
			With GLM 0.9.6, the library took advantage of dropping old compilers to replace preprocessor instantiation of the code by template instantiation.
			The issue of preprocessor instantiation (among them!) is that all the code is generated even if it is never used resulting in building and compiling much bigger header files.
		</p><p>
			Furthermore, a lot of code optimizations have been done to provide better performance at run time by leveraging integer bitfield tricks and compiler intrinsics.
			The test framework has been extended to include performance tests. The total code size of the tests is now 50% of the library code which is still not enough but pretty solid.
		</p><h5>Compilers support</h5><p>
			GLM 0.9.6 removed support for a lot of old compiler versions. If you are really insisting in using an older compiler, you are welcome to keep using GLM 0.9.5.
		</p><p><ul><li class="title">Supported compilers by GLM 0.9.6:</li><li>Apple Clang 4.0 and higher</li><li>CUDA 4.0 and higher</li><li>GCC 4.4 and higher</li><li>LLVM 3.0 and higher</li><li>Intel C++ Composer XE 2013 and higher</li><li>Visual Studio 2010 and higher</li><li>Any conform C++98 compiler</li></ul></p><h5>Lisence</h5><p>
			Finally, GLM is changing Lisence to adopt the <a href="http://glm.g-truc.net/copying.txt">Happy Bunny Lisence</a>.
		</p><h5>Release note</h5><p><ul><li class="title">Features:</li><li>Exposed template vector and matrix types in 'glm' namespace #239, #244</li><li>Added GTX_scalar_multiplication for C++ 11 compiler only #242</li><li>Added GTX_range for C++ 11 compiler only #240</li><li>Added closestPointOnLine function for tvec2 to GTX_closest_point #238</li><li>Added GTC_vec1 extension, *vec1 support to *vec* types</li><li>Updated GTX_associated_min_max with vec1 support</li><li>Added support of precision and integers to linearRand #230</li><li>Added Integer types support to GTX_string_cast #249</li><li>Added vec3 slerp #237</li><li>Added GTX_common with isdenomal #223</li><li>Added GLM_FORCE_SIZE_FUNC to replace .length() by .size() #245</li><li>Added GLM_FORCE_NO_CTOR_INIT</li><li>Added 'uninitialize' to explicitly not initialize a GLM type</li><li>Added GTC_bitfield extension, promoted GTX_bit</li><li>Added GTC_integer extension, promoted GTX_bit and GTX_integer</li><li>Added GTC_round extension, promoted GTX_bit</li><li>Added GLM_FORCE_EXPLICIT_CTOR to require explicit type conversions #269</li><li>Added GTX_type_aligned for aligned vector, matrix and quaternion types</li></ul></p><p><ul><li class="title">Improvements:</li><li>Rely on C++11 to implement isinf and isnan</li><li>Removed GLM_FORCE_CUDA, Cuda is implicitly detected</li><li>Separated Apple Clang and LLVM compiler detection</li><li>Used pragma once</li><li>Undetected C++ compiler automatically compile with GLM_FORCE_CXX98 and GLM_FORCE_PURE</li><li>Added not function (from GLSL specification) on VC12</li><li>Optimized bitfieldReverse and bitCount functions</li><li>Optimized findLSB and findMSB functions</li><li>Optimized matrix-vector multiple performance with Cuda #257, #258</li><li>Reduced integer type redifinitions #233</li><li>Rewrited of GTX_fast_trigonometry #264 #265</li><li>Made types trivially copyable #263</li><li>Removed iostream in GLM tests</li><li>Used std features within GLM without redeclaring</li><li>Optimized cot function #272</li><li>Optimized sign function #272</li><li>Added explicit cast from quat to mat3 and mat4 #275</li></ul></p><p><ul><li class="title">Fixes:</li><li>Fixed std::nextafter not supported with C++11 on Android #217</li><li>Fixed missing value_type for dual quaternion</li><li>Fixed return type of dual quaternion length</li><li>Fixed infinite loop in isfinite function with GCC #221</li><li>Fixed Visual Studio 14 compiler warnings</li><li>Fixed implicit conversion from another tvec2 type to another tvec2 #241</li><li>Fixed lack of consistency of quat and dualquat constructors</li><li>Fixed uaddCarray #253</li><li>Fixed float comparison warnings #270</li></ul></p><p><ul><li class="title">Deprecation:</li><li>Removed degrees for function parameters</li><li>Removed GLM_FORCE_RADIANS, active by default</li><li>Removed VC 2005 / 8 and 2008 / 9 support</li><li>Removed GCC 3.4 to 4.5 support</li><li>Removed LLVM GCC support</li><li>Removed LLVM 2.6 to 2.9 support</li><li>Removed CUDA 3.0 to 4.0 support</li></ul></p><p>
			Enjoy!
		</p><p><ul><li>Download: <a href="https://github.com/g-truc/glm/releases/download/0.9.6.0/glm-0.9.6.0.zip">GLM 0.9.6.0</a> (<a href="https://github.com/g-truc/glm/releases/download/0.9.6.0/glm-0.9.6.0.zip">ZIP, 4.1 MB</a>)  (<a href="https://github.com/g-truc/glm/releases/download/0.9.6.0/glm-0.9.6.0.7z">7Z, 2.7 MB</a>) </li><li><a href="https://github.com/g-truc/glm/issues">Submit a bug report</a></li><li><a href="../0.9.6/glm-0.9.6.pdf">GLM 0.9.6 Manual</a></li><li><a href="../0.9.6/api/index.html">GLM 0.9.6 API</a></li></ul></p></div></content></entry><entry><title>GLM 0.9.5.4 released</title><link href="http://glm.g-truc.net/feed.atom" type="application/atom+xml" rel="self" lang="en" /><link href="http://glm.g-truc.net/index.html" type="text/html" rel="alternate" lang="en" /><id>http://glm.g-truc.netindex0093.html</id><updated>2014-06-21T18:30:00.00Z</updated><content xml:lang="en" type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml" class="atom-content"><p><ul><li class="title">Changelog:</li><li>Added GTX_io for io with 'iostream' #144</li><li>Added FindGLM install for CMake #189</li><li>Optimized quaternion vector rotation #205</li><li>Fixed non-utf8 character #196</li><li>Fixed GTX_color_space - saturation #195</li><li>Fixed glm::isinf and glm::isnan for with Android NDK 9d #191</li><li>Fixed builtin GLM_ARCH_SSE4 #204</li><li>Fixed missing doxygen @endcond tag #211</li><li>Fixed instruction set detection with Clang #158</li><li>Fixed orientate3 function #207</li><li>Fixed lerp when cosTheta is close to 1 in quaternion slerp #210</li><li>Fixed fastDistance ambiguity #215</li><li>Fixed tweakedInfinitePerspective #208 and added user-defined epsilon to tweakedInfinitePerspective</li><li>Fixed std::copy and std::vector with GLM types #214</li><li>Fixed strict aliasing issues #212, #152</li><li>Fixed std::nextafter not supported with C++11 on Android #213</li><li>Fixed corner cases in exp and log functions for quaternions #199</li></ul></p><p><ul><li>Download: <a href="https://github.com/g-truc/glm/releases/download/0.9.5.4/glm-0.9.5.4.zip">GLM 0.9.5.4</a> (<a href="https://github.com/g-truc/glm/releases/download/0.9.5.4/glm-0.9.5.4.zip">ZIP, 4.0 MB</a>)  (<a href="https://github.com/g-truc/glm/releases/download/0.9.5.4/glm-0.9.5.4.7z">7Z, 2.6 MB</a>) </li><li><a href="https://github.com/g-truc/glm/issues">Submit a bug report</a></li><li><a href="../0.9.5/glm-0.9.5.pdf">GLM 0.9.5 Manual</a></li><li><a href="../0.9.5/api/index.html">GLM 0.9.5 API</a></li></ul></p></div></content></entry></feed>