<?xml version="1.0" encoding="utf-8" standalone="no"?><!DOCTYPE feed PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<feed xmlns="http://www.w3.org/2005/Atom"><title>OpenGL Mathematics</title><subtitle>OpenGL Mathematics</subtitle><link href="http://glm.g-truc.net/feed.atom" type="application/atom+xml" rel="self" /><link href="http://glm.g-truc.net/index.html" lang="en" type="text/html" rel="alternate" /><id>http://glm.g-truc.net/index.html</id><updated>2014-11-30T23:30:00.00Z</updated><author><name /></author><entry><title>GLM 0.9.6.0 released</title><link href="http://glm.g-truc.net/feed.atom" type="application/atom+xml" rel="self" lang="en" /><link href="http://glm.g-truc.net/index.html" type="text/html" rel="alternate" lang="en" /><id>http://glm.g-truc.netindex0094.html</id><updated>2014-11-30T23:30:00.00Z</updated><content xml:lang="en" type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml" class="atom-content"><p>
      GLM 0.9.6.0 is available with many changes.
    </p><h5>Transition from degrees to radians compatibility break and GLM 0.9.5.4 help</h5><p>
      One of the long term issue with GLM is that some functions were using radians, functions from GLSL and others were using degrees, functions from GLU or legacy OpenGL.
    </p><p>
      In GLM 0.9.5, we can use <span class="codeword">GLM_FORCE_RADIANS</span> to force all GLM functions to adopt radians.
    </p><span class="code-title">In GLM 0.9.5 in degrees:</span><ul class="code-list"><li class="code-line"><span class="code-line-content"><span class="keyword">#include </span><span class="string">&lt;glm/mat4.hpp&gt;</span></span></li><li class="code-line"><span class="code-line-content"><span class="keyword">#include </span><span class="string">&lt;glm/gtc/matrix_tansform.hpp&gt;</span></span></li><li class="code-line"><span class="code-line-content" /></li><li class="code-line"><span class="code-line-content">
        glm::mat4 my_rotateZ(glm::mat4 <span class="keyword">const</span> &amp; m, <span class="keyword">float</span> angleInRadians)
      </span></li><li class="code-line"><span class="code-line-content">{</span></li><li class="code-line"><span style="padding-left:32px" class="code-line-content"><span class="keyword">return</span> glm::rotate(m, glm::degrees(angleInRadians), glm::vec3(0.0, 0.0, 1.0));
      </span></li><li class="code-line"><span class="code-line-content">}</span></li></ul><span class="code-title">In GLM 0.9.5 in radians:</span><ul class="code-list"><li class="code-line"><span class="code-line-content"><span class="keyword">#define </span> GLM_FORCE_RADIANS
      </span></li><li class="code-line"><span class="code-line-content"><span class="keyword">#include </span><span class="string">&lt;glm/mat4.hpp&gt;</span></span></li><li class="code-line"><span class="code-line-content"><span class="keyword">#include </span><span class="string">&lt;glm/gtc/matrix_tansform.hpp&gt;</span></span></li><li class="code-line"><span class="code-line-content" /></li><li class="code-line"><span class="code-line-content">
        glm::mat4 my_rotateZ(glm::mat4 <span class="keyword">const</span> &amp; m, <span class="keyword">float</span> angleInRadians)
      </span></li><li class="code-line"><span class="code-line-content">{</span></li><li class="code-line"><span style="padding-left:32px" class="code-line-content"><span class="keyword">return</span> glm::rotate(m, angleInRadians, glm::vec3(0.0, 0.0, 1.0));
      </span></li><li class="code-line"><span class="code-line-content">}</span></li></ul><span class="code-title">In GLM 0.9.6 in radians only:</span><ul class="code-list"><li class="code-line"><span class="code-line-content"><span class="keyword">#include </span><span class="string">&lt;glm/mat4.hpp&gt;</span></span></li><li class="code-line"><span class="code-line-content"><span class="keyword">#include </span><span class="string">&lt;glm/gtc/matrix_tansform.hpp&gt;</span></span></li><li class="code-line"><span class="code-line-content" /></li><li class="code-line"><span class="code-line-content">
        glm::mat4 my_rotateZ(glm::mat4 <span class="keyword">const</span> &amp; m, <span class="keyword">float</span> angleInRadians)
      </span></li><li class="code-line"><span class="code-line-content">{</span></li><li class="code-line"><span style="padding-left:32px" class="code-line-content"><span class="keyword">return</span> glm::rotate(m, angleInRadians, glm::vec3(0.0, 0.0, 1.0));
      </span></li><li class="code-line"><span class="code-line-content">}</span></li></ul><span class="code-title">In GLM 0.9.6 if you what to use degrees anyway:</span><ul class="code-list"><li class="code-line"><span class="code-line-content"><span class="keyword">#include </span><span class="string">&lt;glm/mat4.hpp&gt;</span></span></li><li class="code-line"><span class="code-line-content"><span class="keyword">#include </span><span class="string">&lt;glm/gtc/matrix_tansform.hpp&gt;</span></span></li><li class="code-line"><span class="code-line-content" /></li><li class="code-line"><span class="code-line-content">
        glm::mat4 my_rotateZ(glm::mat4 <span class="keyword">const</span> &amp; m, <span class="keyword">float</span> angleInDegrees)
      </span></li><li class="code-line"><span class="code-line-content">{</span></li><li class="code-line"><span style="padding-left:32px" class="code-line-content"><span class="keyword">return</span> glm::rotate(m, glm::radians(angleInDegrees), glm::vec3(0.0, 0.0, 1.0));
      </span></li><li class="code-line"><span class="code-line-content">}</span></li></ul><p>
      GLM 0.9.5 will show warning messages at compilation each time a function taking degrees is used.
    </p>
      GLM: rotate function taking degrees as a parameter is deprecated. <span class="codeword">#define GLM_FORCE_RADIANS</span> before including GLM headers to remove this message.
    <p>
      If you are using a version of GLM older than GLM 0.9.5.1, update to <a href="./post-0660.html">GLM 0.9.5.4</a> before transitioning to GLM 0.9.6 to get this help in that process.
    </p>Make sure to build and run successfully your application with GLM 0.9.5 with GLM_FORCE_RADIANS, before transistioning to GLM 0.9.6<p>
      Finally, here is a list of all the functions that could use degrees in GLM 0.9.5.4 that requires radians in GLM 0.9.6:
      <span class="codeword">rotate</span> (matrices and quaternions),
      <span class="codeword">perspective</span>,
      <span class="codeword">perspectiveFov</span>,
      <span class="codeword">infinitePerspective</span>,
      <span class="codeword">tweakedInfinitePerspective</span>,
      <span class="codeword">roll</span>,
      <span class="codeword">pitch</span>,
      <span class="codeword">yaw</span>,
      <span class="codeword">angle</span>,
      <span class="codeword">angleAxis</span>,
      <span class="codeword">polar</span>,
      <span class="codeword">euclidean</span>,
      <span class="codeword">rotateNormalizedAxis</span>,
      <span class="codeword">rotateX</span>,
      <span class="codeword">rotateY</span>,
      <span class="codeword">rotateZ</span> and
      <span class="codeword">orientedAngle</span>.
    </p><h5>Using GLM template types</h5><p>
      There are a lot of reasons for using template types: Writing new template classes and functions or defining new types.
      Unfortunately, until GLM 0.9.5, GLM template types were defined into the <span class="codeword">detail</span> namespace indicating there are implementation details that may changed.
    </p><p>
      With GLM 0.9.6, template types are accessible from the GLM namespace and guarantee to be stable onward.
    </p><span class="code-title">Example of template functions, GLM 0.9.5 and 0.9.6 style:</span><ul class="code-list"><li class="code-line"><span class="code-line-content"><span class="keyword">#include </span><span class="string">&lt;glm/geometry.hpp&gt;</span></span></li><li class="code-line"><span class="code-line-content"><span class="keyword">#include </span><span class="string">&lt;glm/exponential.hpp&gt;</span></span></li><li class="code-line"><span class="code-line-content" /></li><li class="code-line"><span class="code-line-content"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> vecType&gt;
      </span></li><li class="code-line"><span class="code-line-content"><span class="keyword">typename</span> vecType::value_type normalizeDot(vecType <span class="keyword">const</span> &amp; a, vecType <span class="keyword">const</span> &amp; b)
      </span></li><li class="code-line"><span class="code-line-content">{</span></li><li class="code-line"><span style="padding-left:32px" class="code-line-content"><span class="keyword">return</span> glm::dot(a, b) * glm::inversesqrt(glm::dot(a, a) * glm::dot(b, b));
      </span></li><li class="code-line"><span class="code-line-content">}</span></li><li class="code-line"><span class="code-line-content" /></li><li class="code-line"><span class="code-line-content"><span class="keyword">#include </span><span class="string">&lt;glm/vec4.hpp&gt;</span></span></li><li class="code-line"><span class="code-line-content" /></li><li class="code-line"><span class="code-line-content"><span class="keyword">int</span> main()
      </span></li><li class="code-line"><span class="code-line-content">{</span></li><li class="code-line"><span style="padding-left:32px" class="code-line-content"><span class="keyword">return</span> normalizeDot(glm::vec4(2.0), glm::vec4(2.0)) &gt; 0.0f ? 0 : 1
      </span></li><li class="code-line"><span class="code-line-content">}</span></li></ul><span class="code-title">Example of template functions, alternative GLM 0.9.6 style:</span><ul class="code-list"><li class="code-line"><span class="code-line-content"><span class="keyword">#include </span><span class="string">&lt;glm/geometry.hpp&gt;</span></span></li><li class="code-line"><span class="code-line-content"><span class="keyword">#include </span><span class="string">&lt;glm/exponential.hpp&gt;</span></span></li><li class="code-line"><span class="code-line-content" /></li><li class="code-line"><span class="code-line-content"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">template</span> &lt;<span class="keyword">typename</span>, glm::precision&gt; <span class="keyword">class</span> vecType&gt;
      </span></li><li class="code-line"><span class="code-line-content">
        T normalizeDot(vecType&lt;T, P&gt; <span class="keyword">const</span> &amp; a, vecType&lt;T, P&gt; <span class="keyword">const</span> &amp; b)
      </span></li><li class="code-line"><span class="code-line-content">{</span></li><li class="code-line"><span style="padding-left:32px" class="code-line-content"><span class="keyword">return</span> glm::dot(a, b) * glm::inversesqrt(glm::dot(a, a) * glm::dot(b, b));
      </span></li><li class="code-line"><span class="code-line-content">}</span></li><li class="code-line"><span class="code-line-content" /></li><li class="code-line"><span class="code-line-content"><span class="keyword">#include </span><span class="string">&lt;glm/vec4.hpp&gt;</span></span></li><li class="code-line"><span class="code-line-content" /></li><li class="code-line"><span class="code-line-content"><span class="keyword">int</span> main()
      </span></li><li class="code-line"><span class="code-line-content">{</span></li><li class="code-line"><span style="padding-left:32px" class="code-line-content"><span class="keyword">return</span> normalizeDot(glm::vec4(2.0), glm::vec4(2.0)) &gt; 0.0f ? 0 : 1
      </span></li><li class="code-line"><span class="code-line-content">}</span></li></ul><span class="code-title">Example of typedefs with GLM 0.9.6:</span><ul class="code-list"><li class="code-line"><span class="code-line-content"><span class="keyword">#include </span><span class="string">&lt;cstddef&gt;</span></span></li><li class="code-line"><span class="code-line-content"><span class="keyword">#include </span><span class="string">&lt;glm/vec4.hpp&gt;</span></span></li><li class="code-line"><span class="code-line-content"><span class="keyword">#include </span><span class="string">&lt;glm/mat4.hpp&gt;</span></span></li><li class="code-line"><span class="code-line-content" /></li><li class="code-line"><span class="code-line-content"><span class="keyword">typedef </span> glm::tvec4&lt;std::size_t&gt; size4;
      </span></li><li class="code-line"><span class="code-line-content"><span class="keyword">typedef </span> glm::tvec4&lt;<span class="keyword">long double</span>, glm::highp&gt; ldvec4;
      </span></li><li class="code-line"><span class="code-line-content"><span class="keyword">typedef </span> glm::tmat4x4&lt;<span class="keyword">long double</span>, glm::highp&gt; ldmat4x4;
      </span></li></ul><h5>Optimizations</h5><p>
      With GLM 0.9.5, the library started to tackle the issue of compilation time by introducing forward declarations through <span class="codeword">&lt;glm/fwd.hpp&gt;</span> but also by providing an alternative to the monolithic <span class="codeword">&lt;glm/glm.hpp&gt;</span> headers with <span class="codeword">&lt;glm/vec2.hpp&gt;</span>, <span class="codeword">&lt;glm/mat3x2.hpp&gt;</span> and <span class="codeword">&lt;glm/common.hpp&gt;</span>, etc.
    </p><p>
      With GLM 0.9.6, the library took advantage of dropping old compilers to replace preprocessor instantiation of the code by template instantiation.
      The issue of preprocessor instantiation (among them!) is that all the code is generated even if it is never used resulting in building and compiling much bigger header files.
    </p><p>
      Furthermore, a lot of code optimizations have been done to provide better performance at run time by leveraging integer bitfield tricks and compiler intrinsics.
      The test framework has been extended to include performance tests. The total code size of the tests is now 50% of the library code which is still not enough but pretty solid.
    </p><h5>Compilers support</h5><p>
      GLM 0.9.6 removed support for a lot of old compiler versions. If you are really insisting in using an older compiler, you are welcome to keep using GLM 0.9.5.
    </p><p><ul><li class="title">Supported compilers by GLM 0.9.6:</li><li>Apple Clang 4.0 and higher</li><li>CUDA 4.0 and higher</li><li>GCC 4.4 and higher</li><li>LLVM 3.0 and higher</li><li>Intel C++ Composer XE 2013 and higher</li><li>Visual Studio 2010 and higher</li><li>Any conform C++98 compiler</li></ul></p><h5>Lisence</h5><p>
      Finally, GLM is changing Lisence to adopt the <a href="http://glm.g-truc.net/copying.txt">Happy Bunny Lisence</a>.
    </p><h5>Release note</h5><p><ul><li class="title">Features:</li><li>Exposed template vector and matrix types in 'glm' namespace #239, #244</li><li>Added GTX_scalar_multiplication for C++ 11 compiler only #242</li><li>Added GTX_range for C++ 11 compiler only #240</li><li>Added closestPointOnLine function for tvec2 to GTX_closest_point #238</li><li>Added GTC_vec1 extension, *vec1 support to *vec* types</li><li>Updated GTX_associated_min_max with vec1 support</li><li>Added support of precision and integers to linearRand #230</li><li>Added Integer types support to GTX_string_cast #249</li><li>Added vec3 slerp #237</li><li>Added GTX_common with isdenomal #223</li><li>Added GLM_FORCE_SIZE_FUNC to replace .length() by .size() #245</li><li>Added GLM_FORCE_NO_CTOR_INIT</li><li>Added 'uninitialize' to explicitly not initialize a GLM type</li><li>Added GTC_bitfield extension, promoted GTX_bit</li><li>Added GTC_integer extension, promoted GTX_bit and GTX_integer</li><li>Added GTC_round extension, promoted GTX_bit</li><li>Added GLM_FORCE_EXPLICIT_CTOR to require explicit type conversions #269</li><li>Added GTX_type_aligned for aligned vector, matrix and quaternion types</li></ul></p><p><ul><li class="title">Improvements:</li><li>Rely on C++11 to implement isinf and isnan</li><li>Removed GLM_FORCE_CUDA, Cuda is implicitly detected</li><li>Separated Apple Clang and LLVM compiler detection</li><li>Used pragma once</li><li>Undetected C++ compiler automatically compile with GLM_FORCE_CXX98 and GLM_FORCE_PURE</li><li>Added not function (from GLSL specification) on VC12</li><li>Optimized bitfieldReverse and bitCount functions</li><li>Optimized findLSB and findMSB functions</li><li>Optimized matrix-vector multiple performance with Cuda #257, #258</li><li>Reduced integer type redifinitions #233</li><li>Rewrited of GTX_fast_trigonometry #264 #265</li><li>Made types trivially copyable #263</li><li>Removed iostream in GLM tests</li><li>Used std features within GLM without redeclaring</li><li>Optimized cot function #272</li><li>Optimized sign function #272</li><li>Added explicit cast from quat to mat3 and mat4 #275</li></ul></p><p><ul><li class="title">Fixes:</li><li>Fixed std::nextafter not supported with C++11 on Android #217</li><li>Fixed missing value_type for dual quaternion</li><li>Fixed return type of dual quaternion length</li><li>Fixed infinite loop in isfinite function with GCC #221</li><li>Fixed Visual Studio 14 compiler warnings</li><li>Fixed implicit conversion from another tvec2 type to another tvec2 #241</li><li>Fixed lack of consistency of quat and dualquat constructors</li><li>Fixed uaddCarray #253</li><li>Fixed float comparison warnings #270</li></ul></p><p><ul><li class="title">Deprecation:</li><li>Removed degrees for function parameters</li><li>Removed GLM_FORCE_RADIANS, active by default</li><li>Removed VC 2005 / 8 and 2008 / 9 support</li><li>Removed GCC 3.4 to 4.5 support</li><li>Removed LLVM GCC support</li><li>Removed LLVM 2.6 to 2.9 support</li><li>Removed CUDA 3.0 to 4.0 support</li></ul></p><p>
      Enjoy!
    </p><p><ul><li>Download: <a href="https://sourceforge.net/projects/ogl-math/files/glm-0.9.6.0/glm-0.9.6.0.zip/download">GLM 0.9.6.0</a> (<a href="https://sourceforge.net/projects/ogl-math/files/glm-0.9.6.0/glm-0.9.6.0.zip/download">ZIP, 4.0 MB</a>)  (<a href="https://sourceforge.net/projects/ogl-math/files/glm-0.9.6.0/glm-0.9.6.0.7z/download">7Z, 2.6 MB</a>) </li><li><a href="https://github.com/g-truc/glm/issues">Submit a bug report</a></li><li><a href="../0.9.6/glm-0.9.6.pdf">GLM 0.9.6 Manual</a></li><li><a href="../0.9.6/api/index.html">GLM 0.9.6 API</a></li></ul></p></div></content></entry><entry><title>GLM 0.9.5.4 released</title><link href="http://glm.g-truc.net/feed.atom" type="application/atom+xml" rel="self" lang="en" /><link href="http://glm.g-truc.net/index.html" type="text/html" rel="alternate" lang="en" /><id>http://glm.g-truc.netindex0093.html</id><updated>2014-06-21T18:30:00.00Z</updated><content xml:lang="en" type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml" class="atom-content"><p><ul><li class="title">Changelog:</li><li>Added GTX_io for io with 'iostream' #144</li><li>Added FindGLM install for CMake #189</li><li>Optimized quaternion vector rotation #205</li><li>Fixed non-utf8 character #196</li><li>Fixed GTX_color_space - saturation #195</li><li>Fixed glm::isinf and glm::isnan for with Android NDK 9d #191</li><li>Fixed builtin GLM_ARCH_SSE4 #204</li><li>Fixed missing doxygen @endcond tag #211</li><li>Fixed instruction set detection with Clang #158</li><li>Fixed orientate3 function #207</li><li>Fixed lerp when cosTheta is close to 1 in quaternion slerp #210</li><li>Fixed fastDistance ambiguity #215</li><li>Fixed tweakedInfinitePerspective #208 and added user-defined epsilon to tweakedInfinitePerspective</li><li>Fixed std::copy and std::vector with GLM types #214</li><li>Fixed strict aliasing issues #212, #152</li><li>Fixed std::nextafter not supported with C++11 on Android #213</li><li>Fixed corner cases in exp and log functions for quaternions #199</li></ul></p><p><ul><li>Download: <a href="https://sourceforge.net/projects/ogl-math/files/glm-0.9.5.4/glm-0.9.5.4.zip/download">GLM 0.9.5.4</a> (<a href="https://sourceforge.net/projects/ogl-math/files/glm-0.9.5.4/glm-0.9.5.4.zip/download">ZIP, 4.0 MB</a>)  (<a href="https://sourceforge.net/projects/ogl-math/files/glm-0.9.5.4/glm-0.9.5.4.7z/download">7Z, 2.6 MB</a>) </li><li><a href="https://github.com/g-truc/glm/issues">Submit a bug report</a></li><li><a href="../0.9.5/glm-0.9.5.pdf">GLM 0.9.5 Manual</a></li><li><a href="../0.9.5/api/index.html">GLM 0.9.5 API</a></li></ul></p></div></content></entry><entry><title>GLM 0.9.5.3 released</title><link href="http://glm.g-truc.net/feed.atom" type="application/atom+xml" rel="self" lang="en" /><link href="http://glm.g-truc.net/index.html" type="text/html" rel="alternate" lang="en" /><id>http://glm.g-truc.netindex0092.html</id><updated>2014-04-02T02:30:00.00Z</updated><content xml:lang="en" type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml" class="atom-content"><p><ul><li class="title">Changelog:</li><li>Added instruction set auto detection with Visual C++ using _M_IX86_FP - /arch compiler argument</li><li>Fixed GTX_raw_data code dependency</li><li>Fixed GCC instruction set detection</li><li>Added GLM_GTX_matrix_transform_2d extension (#178, #176)</li><li>Fixed CUDA issues (#169, #168, #183, #182)</li><li>Added support for all extensions but GTX_string_cast to CUDA</li><li>Fixed strict aliasing warnings in GCC 4.8.1 / Android NDK 9c (#152)</li><li>Fixed missing bitfieldInterleave definitions</li><li>Fixed usubBorrow (#171)</li><li>Fixed eulerAngle*** not consistent for right-handed coordinate system (#173)</li><li>Added full tests for eulerAngle*** functions (#173)</li><li>Added workaround for a CUDA compiler bug (#186, #185)</li></ul></p><p><ul><li>Download: <a href="https://sourceforge.net/projects/ogl-math/files/glm-0.9.5.3/glm-0.9.5.3.zip/download">GLM 0.9.5.3</a> (<a href="https://sourceforge.net/projects/ogl-math/files/glm-0.9.5.3/glm-0.9.5.3.zip/download">ZIP, 4.0 MB</a>)  (<a href="https://sourceforge.net/projects/ogl-math/files/glm-0.9.5.3/glm-0.9.5.3.7z/download">7Z, 2.6 MB</a>) </li><li><a href="https://github.com/g-truc/glm/issues">Submit a bug report</a></li><li><a href="../0.9.5/glm-0.9.5.pdf">GLM 0.9.5 Manual</a></li><li><a href="../0.9.5/api/index.html">GLM 0.9.5 API</a></li></ul></p></div></content></entry><entry><title>GLM 0.9.5.2 released</title><link href="http://glm.g-truc.net/feed.atom" type="application/atom+xml" rel="self" lang="en" /><link href="http://glm.g-truc.net/index.html" type="text/html" rel="alternate" lang="en" /><id>http://glm.g-truc.netindex0091.html</id><updated>2014-02-08T23:30:00.00Z</updated><content xml:lang="en" type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml" class="atom-content"><p>
      C++ 11 introduced <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2672.htm">
      initializer lists and uniform initialization syntax</a> and GLM 0.9.5.0 tried to leverage this functionality but didn't get it quite right.
      GLM 0.9.5.2 is fixing this.
    </p><span class="code-title">Examples of usage with GLM:</span><ul class="code-list"><li class="code-line"><span class="code-line-content"><span class="keyword">#define </span> GLM_FORCE_RADIANS</span></li><li class="code-line"><span class="code-line-content"><span class="keyword">#include </span><span class="string">&lt;glm/vec4.hpp&gt;</span></span></li><li class="code-line"><span class="code-line-content"><span class="keyword">#include </span><span class="string">&lt;glm/mat4.hpp&gt;</span></span></li><li class="code-line"><span class="code-line-content"><span class="keyword">#include </span><span class="string">&lt;glm/gtc/quat.hpp&gt;</span></span></li><li class="code-line"><span class="code-line-content" /></li><li class="code-line"><span class="code-line-content">{</span></li><li class="code-line"><span style="padding-left:32px" class="code-line-content">...</span></li><li class="code-line"><span style="padding-left:32px" class="code-line-content">glm::vec4 A{0, 1, 2, 3};</span></li><li class="code-line"><span class="code-line-content" /></li><li class="code-line"><span style="padding-left:32px" class="code-line-content">glm::mat4 B{</span></li><li class="code-line"><span style="padding-left:64px" class="code-line-content">{0, 1, 2, 3},</span></li><li class="code-line"><span style="padding-left:64px" class="code-line-content">{4, 5, 6, 7},</span></li><li class="code-line"><span style="padding-left:64px" class="code-line-content">{8, 9, 10, 11},</span></li><li class="code-line"><span style="padding-left:64px" class="code-line-content">{12, 13, 14, 15}};</span></li><li class="code-line"><span class="code-line-content" /></li><li class="code-line"><span style="padding-left:32px" class="code-line-content">std::vector&lt;glm::mat4&gt; C{</span></li><li class="code-line"><span style="padding-left:64px" class="code-line-content">{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15},</span></li><li class="code-line"><span style="padding-left:64px" class="code-line-content">{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}};</span></li><li class="code-line"><span class="code-line-content" /></li><li class="code-line"><span style="padding-left:32px" class="code-line-content">std::vector&lt;glm::mat4&gt; D{</span></li><li class="code-line"><span style="padding-left:64px" class="code-line-content">{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15},</span></li><li class="code-line"><span style="padding-left:64px" class="code-line-content">{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}};</span></li><li class="code-line"><span class="code-line-content" /></li><li class="code-line"><span style="padding-left:32px" class="code-line-content">std::vector&lt;glm::mat4&gt; E{</span></li><li class="code-line"><span style="padding-left:64px" class="code-line-content">{</span></li><li class="code-line"><span style="padding-left:96px" class="code-line-content">{ 0, 1, 2, 3 },</span></li><li class="code-line"><span style="padding-left:96px" class="code-line-content">{ 4, 5, 6, 7 },</span></li><li class="code-line"><span style="padding-left:96px" class="code-line-content">{ 8, 9, 10, 11 },</span></li><li class="code-line"><span style="padding-left:96px" class="code-line-content">{ 12, 13, 14, 15 }</span></li><li class="code-line"><span style="padding-left:64px" class="code-line-content">},</span></li><li class="code-line"><span style="padding-left:64px" class="code-line-content">{</span></li><li class="code-line"><span style="padding-left:96px" class="code-line-content">{ 0, 1, 2, 3 },</span></li><li class="code-line"><span style="padding-left:96px" class="code-line-content">{ 4, 5, 6, 7 },</span></li><li class="code-line"><span style="padding-left:96px" class="code-line-content">{ 8, 9, 10, 11 },</span></li><li class="code-line"><span style="padding-left:96px" class="code-line-content">{ 12, 13, 14, 15 }</span></li><li class="code-line"><span style="padding-left:64px" class="code-line-content">}};</span></li><li class="code-line"><span class="code-line-content" /></li><li class="code-line"><span style="padding-left:32px" class="code-line-content">glm::quat F{0, 1, 2, 3};</span></li><li class="code-line"><span style="padding-left:32px" class="code-line-content">...</span></li><li class="code-line"><span class="code-line-content">}</span></li></ul><p><ul><li class="title">Changelog:</li><li>Fixed initializer list ambiguity (#159, #160)</li><li>Fixed warnings with the Android NDK 9c</li><li>Fixed non power of two matrix products</li><li>Fixed mix function link error</li><li>Fixed SSE code included in GLM tests on "pure" platforms</li><li>Fixed undefined reference to fastInverseSqrt (#161)</li><li>Fixed GLM_FORCE_RADIANS with &lt;glm/ext.hpp&gt; build error (#165)</li><li>Fix dot product clamp range for vector angle functions. (#163)</li><li>Tentative fix for strict aliasing warning in GCC 4.8.1 / Android NDK 9c (#152)</li><li>Fixed GLM_GTC_constants description brief (#162)</li></ul></p><p><ul><li>Download: <a href="https://sourceforge.net/projects/ogl-math/files/glm-0.9.5.2/glm-0.9.5.2.zip/download">GLM 0.9.5.2</a> (<a href="https://sourceforge.net/projects/ogl-math/files/glm-0.9.5.2/glm-0.9.5.2.zip/download">ZIP, 4.1 MB</a>)  (<a href="https://sourceforge.net/projects/ogl-math/files/glm-0.9.5.2/glm-0.9.5.2.7z/download">7Z, 2.7 MB</a>) </li><li><a href="https://github.com/g-truc/glm/issues">Submit a bug report</a></li><li><a href="../0.9.5/glm-0.9.5.pdf">GLM 0.9.5 Manual</a></li><li><a href="../0.9.5/api/index.html">GLM 0.9.5 API</a></li></ul></p></div></content></entry><entry><title>GLM 0.9.5.1 released</title><link href="http://glm.g-truc.net/feed.atom" type="application/atom+xml" rel="self" lang="en" /><link href="http://glm.g-truc.net/index.html" type="text/html" rel="alternate" lang="en" /><id>http://glm.g-truc.netindex0090.html</id><updated>2013-01-11T23:30:00.00Z</updated><content xml:lang="en" type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml" class="atom-content"><p>
      One of the annoying aspect of GLM is that sometime angles are expressed in degrees and sometime angles are expressed in radians.
      Angles expressed in radians are features coming from GLSL where all the angles are expressed in radians and angles expressed in degrees are features coming from OpenGL compatibility profile.
    </p><p>
      GLM provides the define <span class="codeword">GLM_FORCE_RADIANS</span> to enfore all the angles to be radians. GLM 0.9.5 deprecates degrees so that in GLM 0.9.6 those will be removed.
      Starting with GLM 0.9.5.1, warnings will be prompt for each instance of usage degrees. This is designed to help transitioning user code.
      Defining <span class="codeword">GLM_FORCE_RADIANS</span> will quiet these messages.
    </p><span class="code-title">Transitioning degrees to radians:</span><ul class="code-list"><li class="code-line"><span class="code-line-content"><span class="keyword">#define </span> GLM_FORCE_RADIANS
      </span></li><li class="code-line"><span class="code-line-content"><span class="keyword">#include </span><span class="string">&lt;glm/gtc/matrix_tansform.hpp&gt;</span></span></li><li class="code-line"><span class="code-line-content"><span class="keyword">#include </span><span class="string">&lt;glm/gtc/constants.hpp&gt;</span></span></li><li class="code-line"><span class="code-line-content" /></li><li class="code-line"><span class="code-line-content"><span class="keyword">void</span> transitioning_to_radians()
      </span></li><li class="code-line"><span class="code-line-content">
        {
      </span></li><li class="code-line"><span style="padding-left:32px" class="code-line-content">
        ...
      </span></li><li class="code-line"><span style="padding-left:32px" class="code-line-content">
        glm::mat4 m1 = glm::rotate(glm::mat4(1.f), glm::radians(45.0f), glm::vec3(0.0, 0.0, 1.0));
      </span></li><li class="code-line"><span style="padding-left:32px" class="code-line-content">
        glm::mat4 m2 = glm::rotate(glm::mat4(1.f), glm::pi&lt;float&gt;() * 0.25f, glm::vec3(0.0, 0.0, 1.0));
      </span></li><li class="code-line"><span style="padding-left:32px" class="code-line-content">
        ...
      </span></li><li class="code-line"><span class="code-line-content">
        }
      </span></li></ul><p>
      GLM 0.9.5.1 is also fixing multiple bugs essentially related to the new approach allowing to include each feature individually.
    </p><p><ul><li class="title">Changelog:</li><li>Fixed angle and orientedAngle that sometimes return NaN values (#145)</li><li>Deprecated degrees for function parameters and display a message</li><li>Added possible static_cast conversion of GLM types (#72)</li><li>Fixed error 'inverse' is not a member of 'glm' from glm::unProject (#146)</li><li>Fixed mismatch between some declarations and definitions</li><li>Fixed inverse link error when using namespace glm; (#147)</li><li>Optimized matrix inverse and division code (#149)</li><li>Added intersectRayPlane function (#153)</li><li>Fixed outerProduct return type (#155)</li></ul></p><p><ul><li>Download: <a href="https://sourceforge.net/projects/ogl-math/files/glm-0.9.5.1/glm-0.9.5.1.zip/download">GLM 0.9.5.1</a> (<a href="https://sourceforge.net/projects/ogl-math/files/glm-0.9.5.1/glm-0.9.5.1.zip/download">ZIP, 4.1 MB</a>)  (<a href="https://sourceforge.net/projects/ogl-math/files/glm-0.9.5.1/glm-0.9.5.1.7z/download">7Z, 2.7 MB</a>) </li><li><a href="https://github.com/g-truc/glm/issues">Submit a bug report</a></li><li><a href="../0.9.5/glm-0.9.5.pdf">GLM 0.9.5 Manual</a></li><li><a href="../0.9.5/api/index.html">GLM 0.9.5 API</a></li></ul></p></div></content></entry><entry><title>GLM 0.9.5.0 released</title><link href="http://glm.g-truc.net/feed.atom" type="application/atom+xml" rel="self" lang="en" /><link href="http://glm.g-truc.net/index.html" type="text/html" rel="alternate" lang="en" /><id>http://glm.g-truc.netindex0089.html</id><updated>2013-12-25T23:30:00.00Z</updated><content xml:lang="en" type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml" class="atom-content"><p>
      GLM 0.9.5 broke compatibility with GLM 0.9.4 to bring multiple improvements on multiple fronts: compilation time, generated code performances and usage reliability.
    </p><p>
      First, in previous version GLM switched from including &lt;glm/ext.hpp&gt; to include individual extensions. 
      Just like we can still use &lt;glm/ext.hpp&gt; for global inclusion, with GLM 0.9.5 we can use individual headers to include only the features we need. For example: 
      &lt;glm/vec3.hpp&gt; for glm::vec3, &lt;glm/mat4x4.hpp&gt; for glm::mat4 or &lt;glm/geometry.hpp&gt; for all the version of the geometry section of the GLSL specifications.
    </p><p>
      Futhermore, GLM has a new forward declaration header &lt;glm/fwd.hpp&gt; to help reducing dependecies to GLM code.
    </p><p>
      As a result and for experimentation, <a href="https://github.com/g-truc/ovtsa">a simple raytracer</a> can be compile in less than half the time with GLM 0.9.5 than GLM 0.9.4.
    </p><p>
      Second, the definition of the precision qualifier (lowp, mediump and highp) has changed and now express computation precision in term of ULPs.
      As a conscequence for example sizeof(glm::lowp_vec2), sizeof(glm::mediump_vec2) and sizeof(glm::highp_vec2) return the same values.
      However, the effective computation can be different. For example, the implementation of inversesqrt uses
      <a href="https://en.wikipedia.org/wiki/Fast_inverse_square_root">fast inverse square root</a> for lowp.
    </p><p>
      Finally, some efforts have be put into increasing reliability with a larger coverage of assert and static_assert to give more informative compiler error messages.
      Also, all the half based type have been deleted. 
      These types could be used just like any float of double types but such usage were bad usages requiring a lot of conversions from half to float and float to half, hence very slow performances.
      Instead, GLM 0.9.5 provides a extensive set of packing and unpacking functions (glm/gtc/packing.hpp) so that we have to perform arithmetics in float and when it's done we pack it in half data.
    </p><p>
      For more details, see the changelog following, enjoy!
    </p><p><ul><li class="title">Changelog:</li><li>Added forward declarations (glm/fwd.hpp) for faster compilations</li><li>Added per feature headers</li><li>Minimized GLM internal dependencies</li><li>Improved Intel Compiler detection</li><li>Added bitfieldInterleave and _mm_bit_interleave_si128 functions</li><li>Added GTX_scalar_relational</li><li>Added GTX_dual_quaternion</li><li>Added rotation function to GTX_quaternion (#22)</li><li>Added precision variation of each type</li><li>Added quaternion comparison functions</li><li>Fixed GTX_multiple for negative value</li><li>Removed GTX_ocl_type extension</li><li>Fixed post increment and decrement operators</li><li>Fixed perspective with zNear == 0 (#71)</li><li>Removed l-value swizzle operators</li><li>Cleaned up compiler detection code for unsupported compilers</li><li>Replaced C cast by C++ casts</li><li>Fixed .length() that should return a int and not a size_t</li><li>Added GLM_FORCE_SIZE_T_LENGTH and glm::length_t</li><li>Removed unnecessary conversions</li><li>Optimized packing and unpacking functions</li><li>Removed the normalization of the up argument of lookAt function (#114)</li><li>Added low precision specializations of inversesqrt</li><li>Fixed ldexp and frexp implementations</li><li>Increased assert coverage</li><li>Increased static_assert coverage</li><li>Replaced GLM traits by STL traits when possible</li><li>Allowed including individual core feature</li><li>Increased unit tests completness</li><li>Added creating of a quaternion from two vectors</li><li>Added C++11 initializer lists</li><li>Fixed umulExtended and imulExtended implementations for vector types (#76)</li><li>Fixed CUDA coverage for GTC extensions</li><li>Added GTX_io extension</li><li>Improved GLM messages enabled when defining GLM_MESSAGES</li><li>Hidden matrix _inverse function implementation detail into private section</li></ul></p><p><ul><li>Download: <a href="https://sourceforge.net/projects/ogl-math/files/glm-0.9.5.0/glm-0.9.5.0.zip/download">GLM 0.9.5.0</a> (<a href="https://sourceforge.net/projects/ogl-math/files/glm-0.9.5.0/glm-0.9.5.0.zip/download">ZIP, 4.0 MB</a>)  (<a href="https://sourceforge.net/projects/ogl-math/files/glm-0.9.5.0/glm-0.9.5.0.7z/download">7Z, 2.7 MB</a>) </li><li><a href="https://github.com/g-truc/glm/issues">Submit a bug report</a></li><li><a href="../0.9.5/glm-0.9.5.pdf">GLM 0.9.5 Manual</a></li><li><a href="../0.9.5/api/index.html">GLM 0.9.5 API</a></li></ul></p></div></content></entry><entry><title>GLM 0.9.4.6 released</title><link href="http://glm.g-truc.net/feed.atom" type="application/atom+xml" rel="self" lang="en" /><link href="http://glm.g-truc.net/index.html" type="text/html" rel="alternate" lang="en" /><id>http://glm.g-truc.netindex0088.html</id><updated>2013-08-20T14:00:00.00Z</updated><content xml:lang="en" type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml" class="atom-content"><p>
			New revision of GLM 0.9.4 available thanks to user contributions.
		</p><p><ul><li class="title">Changelog:</li><li>Fixed detection to select the last known compiler if newer version #106</li><li>Fixed is_int and is_uint code duplication with GCC and C++11 #107</li><li>Fixed test suite build while using Clang in C++11 mode</li><li>Added c++1y mode support in CMake test suite</li><li>Added pedantic mode to CMake test suite for Clang and GCC</li><li>Added use of GCC frontend on Unix for ICC and Visual C++ fronted on Windows for ICC</li><li>Added compilation errors for unsupported compiler versions</li><li>Removed ms extension mode to CMake when no using Visual C++</li><li>Fixed glm::orientation with GLM_FORCE_RADIANS defined #112</li><li>Fixed const ref issue on assignment operator taking a scalar parameter #116</li><li>Fixed glm::eulerAngleY implementation</li></ul></p><p><ul><li>Download: <a href="https://sourceforge.net/projects/ogl-math/files/glm-0.9.4.6/glm-0.9.4.6.zip/download">GLM 0.9.4.6</a> (<a href="https://sourceforge.net/projects/ogl-math/files/glm-0.9.4.6/glm-0.9.4.6.zip/download">ZIP, 5.1 MB</a>)  (<a href="https://sourceforge.net/projects/ogl-math/files/glm-0.9.4.6/glm-0.9.4.6.7z/download">7Z, 3.0 MB</a>) </li><li><a href="https://github.com/g-truc/glm/issues">Submit a bug report</a></li><li><a href="../0.9.4/glm-0.9.4.pdf">GLM 0.9.4 Manual</a></li><li><a href="../0.9.4/api/index.html">GLM 0.9.4 API</a></li></ul></p></div></content></entry><entry><title>GLM 0.9.4.5 released</title><link href="http://glm.g-truc.net/feed.atom" type="application/atom+xml" rel="self" lang="en" /><link href="http://glm.g-truc.net/index.html" type="text/html" rel="alternate" lang="en" /><id>http://glm.g-truc.netindex0087.html</id><updated>2013-08-13T23:30:00.00Z</updated><content xml:lang="en" type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml" class="atom-content"><p>
			GLM 0.9.4.5 is available fixing the following minor issues. This is the occasion to also launch the revised GLM website.
		</p><p><ul><li class="title">Changelog:</li><li>Fixed inclusion of intrinsics in "pure" mode #92 </li><li>Fixed language detection on GCC when the C++0x mode isn't enabled #95</li><li>Fixed issue #97: register is deprecated in C++11</li><li>Fixed issue #96: CUDA issues</li><li>Added Windows CE detection #92</li></ul></p><p><ul><li>Download: <a href="https://sourceforge.net/projects/ogl-math/files/glm-0.9.4.5/glm-0.9.4.5.zip/download">GLM 0.9.4.5</a> (<a href="https://sourceforge.net/projects/ogl-math/files/glm-0.9.4.5/glm-0.9.4.5.zip/download">ZIP, 5.2 MB</a>)  (<a href="https://sourceforge.net/projects/ogl-math/files/glm-0.9.4.5/glm-0.9.4.5.7z/download">7Z, 3.0 MB</a>) </li><li><a href="https://github.com/g-truc/glm/issues">Submit a bug report</a></li><li><a href="../0.9.4/glm-0.9.4.pdf">GLM 0.9.4 Manual</a></li><li><a href="../0.9.4/api/index.html">GLM 0.9.4 API</a></li></ul></p></div></content></entry><entry><title>GLM 0.9.4.4 released</title><link href="http://glm.g-truc.net/feed.atom" type="application/atom+xml" rel="self" lang="en" /><link href="http://glm.g-truc.net/index.html" type="text/html" rel="alternate" lang="en" /><id>http://glm.g-truc.netindex0086.html</id><updated>2013-05-29T23:30:00.00Z</updated><content xml:lang="en" type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml" class="atom-content"><p><ul><li class="title">Changelog:</li><li>Fixed slerp when costheta is close to 1 #65</li><li>Fixed mat4x2 value_type constructor #70</li><li>Fixed glm.natvis for Visual C++ 12 #82</li><li>Added assert in inversesqrt to detect division by zero #61</li><li>Fixed missing swizzle operators #86</li><li>Fixed CUDA warnings #86</li><li>Fixed GLM natvis for VC11 #82</li><li>Fixed GLM_GTX_multiple with negative values #79</li><li>Fixed glm::perspective when zNear is zero #71</li></ul></p><p><ul><li>Download: <a href="https://sourceforge.net/projects/ogl-math/files/glm-0.9.4.4/glm-0.9.4.4.zip/download">GLM 0.9.4.4</a> (<a href="https://sourceforge.net/projects/ogl-math/files/glm-0.9.4.4/glm-0.9.4.4.zip/download">ZIP, 5.2 MB</a>)  (<a href="https://sourceforge.net/projects/ogl-math/files/glm-0.9.4.4/glm-0.9.4.4.7z/download">7Z, 3.0 MB</a>) </li><li><a href="https://github.com/g-truc/glm/issues">Submit a bug report</a></li><li><a href="../0.9.4/glm-0.9.4.pdf">GLM 0.9.4 Manual</a></li><li><a href="../0.9.4/api/index.html">GLM 0.9.4 API</a></li></ul></p></div></content></entry><entry><title>GLM packages for Linux</title><link href="http://glm.g-truc.net/feed.atom" type="application/atom+xml" rel="self" lang="en" /><link href="http://glm.g-truc.net/index.html" type="text/html" rel="alternate" lang="en" /><id>http://glm.g-truc.netindex0085.html</id><updated>2013-05-27T23:30:00.00Z</updated><content xml:lang="en" type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml" class="atom-content"><p>
			GLM is now included in many major Linux distributions. Here is a quick list of available packages.
		</p><p><ul><li><a href="https://www.archlinux.org/packages/community/any/glm/">archlinux</a></li><li><a href="http://packages.debian.org/search?searchon=sourcenames&amp;keywords=glm">Debian</a></li><li><a href="http://koji.fedoraproject.org/koji/packageinfo?packageID=14633">Fedora</a></li><li><a href="http://packages.ubuntu.com/source/raring/glm">Ubuntu</a></li><li><a href="http://community.linuxmint.com/software/view/libglm-dev">Mint</a></li><li><a href="https://build.opensuse.org/package/show?package=glm&amp;project=devel%3Alibraries%3Ac_c%2B%2B">OpenSuse</a></li></ul></p><p>
			Thanks to the package maintainers for these contributions!
		</p></div></content></entry></feed>