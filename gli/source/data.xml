<?xml version="1.0" encoding="utf-8"?>

<website>
	<post index="0005" date="18/07/2015" std-date="2015-07-18T23:30:00.00Z" title="GLI 0.6.1.1 released">
		<list title="Changelog:">
			<entry>Fixed interface inconsistencies</entry>
			<entry>Improved clear(), data() and size() performance using caching</entry>
			<entry>Removed internal dependence to std::fstream</entry>
			<entry>Added FORMAT_BGRX8_UNORM and FORMAT_BGRX8_SRGB support #48, #43</entry>
			<entry>Improved FORMAT_RGB8_UNORM loading</entry>
		</list>

		<list>
			<download index="0.6.1.1" />
			<entry href="https://github.com/g-truc/gli/issues">Submit a bug report</entry>
			<entry href="../0.6.1/api/index.html">GLI 0.6.1 API</entry>
		</list>
	</post>

	<post index="0005" date="28/06/2015" std-date="2015-06-28T23:30:00.00Z" title="GLI 0.6.0.0 released">
		<list title="Changelog:">
			<entry>Large refactoring</entry>
			<entry>Added loading DDS from memory</entry>
			<entry>Added saving DDS to memory</entry>
			<entry>Improved DDS coverage for R, RG, RGB and RGBA formats</entry>
			<entry>Added DDS ASTC, PVRTC, ATC and ETC support</entry>
			<entry>Added DDS alpha, luminance and alpha luminance support</entry>
			<entry>Added PVRTC2, ETC2 and EAC formats</entry>
		</list>

		<list>
			<download index="0.6.0.0" />
			<entry href="https://github.com/g-truc/gli/issues">Submit a bug report</entry>
			<entry href="../0.6.0/api/index.html">GLI 0.6.0 API</entry>
		</list>
	</post>

	<post index="0004" date="20/01/2014" std-date="2014-01-20T23:30:00.00Z" title="GLI 0.5.1.1 released">
		<paragraph>
			Tested with Visual C++, GCC, Clang and ICC.
		</paragraph>
		<list title="Changelog:">
			<entry>Fixed swizzled RGB channel when reading back a DDS</entry>
			<entry>Fixed getMask* link errors</entry>
		</list>

		<list>
			<download index="0.5.1.1" />
			<entry href="https://github.com/g-truc/gli/issues">Submit a bug report</entry>
			<entry href="../0.5.1/api/index.html">GLI 0.5.1 API</entry>
		</list>
	</post>

	<post index="0003" date="18/01/2014" std-date="2014-01-18T23:30:00.00Z" title="GLI 0.5.1.0 released">
		<list title="Changelog:">
			<entry>Added flip function</entry>
			<entry>Added level_count function</entry>
			<entry>Fixed interaction with std::map (#33)</entry>
			<entry>Added texelFetch and texelWrite functions</entry>
		</list>

		<list>
			<download index="0.5.1.0" />
			<entry href="https://github.com/g-truc/gli/issues">Submit a bug report</entry>
			<entry href="../0.5.1/api/index.html">GLI 0.5.1 API</entry>
		</list>
	</post>

	<post index="0002" date="23/11/2013" std-date="2013-11-23T23:30:00.00Z" title="GLI 0.5.0.0 released">
		<list title="Changelog:">
			<entry>Essencially a rewrite of the library</entry>
			<entry>Added explicit copies</entry>
			<entry>Added single memory allocation per texture storage</entry>
			<entry>Added texture views</entry>
			<entry>Added texture copies</entry>
			<entry>Added comparison operators</entry>
			<entry>Added clear</entry>
		</list>

		<list>
			<download index="0.5.0.0" />
			<entry href="https://github.com/g-truc/gli/issues">Submit a bug report</entry>
			<entry href="../0.5.0/api/index.html">GLI 0.5.0 API</entry>
		</list>
	</post>

	<post index="0001" date="10/07/2013" std-date="2013-07-10T23:30:00.00Z" title="GLI website available">
		<paragraph>
			Welcome on GLI website where new releases will be published and documentation will be provided.
		</paragraph>

		<list>
			<download index="0.4.1.0" />
			<entry href="https://github.com/g-truc/gli/issues">Submit a bug report</entry>
		</list>
	</post>

	<about-long>
		<paragraph>
			OpenGL Image (GLI) is a header only C++ image library for graphics software.
		</paragraph>
		<paragraph>
			This library works perfectly with <link href="https://www.opengl.org">OpenGL</link> but it also ensures interoperability with other third party libraries and SDK. It is a good candidate for software rendering (raytracing / rasterisation), image processing, physic simulations and any development context that requires a simple and convenient mathematics library.
		</paragraph>
		<list title="GLI is written in C++11. It is a platform independent library with no dependence and it supports the following compilers:">
			<entry>
				<link href="https://developer.apple.com/library/mac/documentation/CompilerTools/Conceptual/LLVMCompilerOverview/index.html">Apple Clang</link> 4.0 and higher
			</entry>
			<entry>
				<link href="http://gcc.gnu.org/">GCC</link> 4.6 and higher
			</entry>
			<entry>
				<link href="https://software.intel.com/en-us/intel-compilers">Intel C++ Composer</link> XE 2013 and higher
			</entry>
			<entry>
				<link href="http://llvm.org/">LLVM</link> 3.2 and higher
			</entry>
			<entry>
				<link href="http://www.visualstudio.com/">Visual Studio</link> 2012 and higher
			</entry>
			<entry>
				Any conform C++11 compiler
			</entry>
		</list>
		<paragraph>
			For more information about GLI, please have a look at <link href="../0.6.1/api/index.html">the API reference documentation</link>.
		</paragraph>
		<paragraph>
			The source code and the documentation, including this manual, are licensed under the 
			<link href="http://glm.g-truc.net/copying.txt">Happy Bunny License (Modified MIT) or the MIT License</link>.
		</paragraph>
		<paragraph>
			Thanks for contributing to the project by <link href="https://github.com/g-truc/gli/issues">submitting issues</link> for bug reports and feature requests. Any feedback is welcome at <link href="mailto://gli@g-truc.net">gli@g-truc.net</link>.
		</paragraph>
		<code title="Code sample:">
			<line><keyword>#include </keyword><string>&lt;gli/gli.hpp&gt;</string></line>
			<line></line>
			<line>GLuint CreateTextureArray(<keyword>char </keyword><keyword>const</keyword>* Filename)</line>
			<line>{</line>
			<line align="32px">gli::texture2DArray Texture(gli::load_dds(Filename));</line>
			<line align="32px"><keyword>if</keyword>(Texture.empty())</line>
			<line align="64px"><keyword>return</keyword> 0;</line>
			<line></line>
			<line align="32px">gli::gl GL;</line>
			<line align="32px">gli::gl::format <keyword>const</keyword> Format = GL.translate(Texture.format());</line>
			<line></line>
			<line align="32px">GLuint TextureName = 0;</line>
			<line align="32px">glGenTextures(1, &amp;TextureName);</line>
			<line align="32px">glBindTexture(GL_TEXTURE_2D_ARRAY, TextureName);</line>
			<line></line>
			<line align="32px">glTexParameteri(GL_TEXTURE_2D_ARRAY, GL_TEXTURE_BASE_LEVEL, 0);</line>
			<line align="32px">glTexParameteri(GL_TEXTURE_2D_ARRAY, GL_TEXTURE_MAX_LEVEL, <keyword>static_cast</keyword>&lt;GLint&gt;(Texture.levels() - 1));</line>
			<line align="32px">glTexParameteri(GL_TEXTURE_2D_ARRAY, GL_TEXTURE_SWIZZLE_R, Format.Swizzle[0]);</line>
			<line align="32px">glTexParameteri(GL_TEXTURE_2D_ARRAY, GL_TEXTURE_SWIZZLE_G, Format.Swizzle[1]);</line>
			<line align="32px">glTexParameteri(GL_TEXTURE_2D_ARRAY, GL_TEXTURE_SWIZZLE_B, Format.Swizzle[2]);</line>
			<line align="32px">glTexParameteri(GL_TEXTURE_2D_ARRAY, GL_TEXTURE_SWIZZLE_A, Format.Swizzle[3]);</line>
			<line></line>
			<line align="32px">glTexStorage3D(GL_TEXTURE_2D_ARRAY, <keyword>static_cast</keyword>&lt;GLint&gt;(Texture.levels()),</line>
			<line align="64px">Format.Internal,</line>
			<line align="64px"><keyword>static_cast</keyword>&lt;GLsizei&gt;(Texture.dimensions().x),</line>
			<line align="64px"><keyword>static_cast</keyword>&lt;GLsizei&gt;(Texture.dimensions().y),</line>
			<line align="64px"><keyword>static_cast</keyword>&lt;GLsizei&gt;(1));</line>
			<line></line>
			<line align="32px"><keyword>if</keyword>(gli::is_compressed(Texture.format()))</line>
			<line align="32px">{</line>
			<line align="64px"><keyword>for</keyword>(std::size_t Level = 0; Level &lt; Texture.levels(); ++Level)</line>
			<line align="64px">{</line>
			<line align="96px">glCompressedTexSubImage3D(GL_TEXTURE_2D_ARRAY, <keyword>static_cast</keyword>&lt;GLint&gt;(Level),</line>
			<line align="128px">0, 0, 0,</line>
			<line align="128px"><keyword>static_cast</keyword>&lt;GLsizei&gt;(Texture[Level].dimensions().x),</line>
			<line align="128px"><keyword>static_cast</keyword>&lt;GLsizei&gt;(Texture[Level].dimensions().y),</line>
			<line align="128px"><keyword>static_cast</keyword>&lt;GLsizei&gt;(1),</line>
			<line align="128px">Format.External,</line>
			<line align="128px"><keyword>static_cast</keyword>&lt;GLsizei&gt;(Texture[Level].size()),</line>
			<line align="128px">Texture[Level].data());</line>
			<line align="64px">}</line>
			<line align="32px">}</line>
			<line align="32px"><keyword>else</keyword></line>
			<line align="32px">{</line>
			<line align="64px"><keyword>for</keyword>(std::size_t Level = 0; Level &lt; Texture.levels(); ++Level)</line>
			<line align="64px">{</line>
			<line align="96px">glTexSubImage3D(GL_TEXTURE_2D_ARRAY, <keyword>static_cast</keyword>&lt;GLint&gt;(Level),</line>
			<line align="128px">0, 0, 0,</line>
			<line align="128px"><keyword>static_cast</keyword>&lt;GLsizei&gt;(Texture[Level].dimensions().x),</line>
			<line align="128px"><keyword>static_cast</keyword>&lt;GLsizei&gt;(Texture[Level].dimensions().y),</line>
			<line align="128px"><keyword>static_cast</keyword>&lt;GLsizei&gt;(1),</line>
			<line align="128px">Format.External, Format.Type,</line>
			<line align="128px">Texture[Level].data());</line>
			<line align="64px">}</line>
			<line align="32px">}</line>
			<line></line>
			<line align="32px"><keyword>return</keyword> TextureName;</line>
			<line>}</line>
		</code>
	</about-long>

	<about-short>
		Effective texture loading, access and processing.
	</about-short>
	<about-short>
		A C++ image library based on OpenGL conventions
	</about-short>
</website>
